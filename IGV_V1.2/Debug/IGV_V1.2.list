
IGV_V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006238  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080063c8  080063c8  000073c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800657c  0800657c  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  0800657c  0800657c  0000757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006584  08006584  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006584  08006584  00007584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006588  08006588  00007588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800658c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00004264  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200042d8  200042d8  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014328  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e2d  00000000  00000000  0001c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0001f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7d  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e36  00000000  00000000  000210d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013286  00000000  00000000  00043f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4243  00000000  00000000  00057191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b3d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dbc  00000000  00000000  0012b418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001301d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063b0 	.word	0x080063b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080063b0 	.word	0x080063b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	20000130 	.word	0x20000130

080005a4 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&str1, 3);
 80005ac:	2203      	movs	r2, #3
 80005ae:	490f      	ldr	r1, [pc, #60]	@ (80005ec <HAL_UART_RxCpltCallback+0x48>)
 80005b0:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <HAL_UART_RxCpltCallback+0x4c>)
 80005b2:	f002 ffd9 	bl	8003568 <HAL_UART_Receive_IT>
  MainCMD = atoi(str1);
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <HAL_UART_RxCpltCallback+0x48>)
 80005b8:	f005 f97c 	bl	80058b4 <atoi>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <HAL_UART_RxCpltCallback+0x50>)
 80005c0:	6013      	str	r3, [r2, #0]
  sprintf(str1, "%d\r", MainCMD);
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_UART_RxCpltCallback+0x50>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	490b      	ldr	r1, [pc, #44]	@ (80005f8 <HAL_UART_RxCpltCallback+0x54>)
 80005ca:	4808      	ldr	r0, [pc, #32]	@ (80005ec <HAL_UART_RxCpltCallback+0x48>)
 80005cc:	f005 f9fa 	bl	80059c4 <siprintf>
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)str1, strlen(str1));
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <HAL_UART_RxCpltCallback+0x48>)
 80005d2:	f7ff fdfd 	bl	80001d0 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29b      	uxth	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	4903      	ldr	r1, [pc, #12]	@ (80005ec <HAL_UART_RxCpltCallback+0x48>)
 80005de:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <HAL_UART_RxCpltCallback+0x4c>)
 80005e0:	f002 ff8c 	bl	80034fc <HAL_UART_Transmit_IT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200003c4 	.word	0x200003c4
 80005f0:	20000378 	.word	0x20000378
 80005f4:	200003d8 	.word	0x200003d8
 80005f8:	080063c8 	.word	0x080063c8

080005fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
   //HAL_UART_Transmit_IT(&huart2, data, sizeof (data));
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <vPulseLEDTask>:

void vPulseLEDTask(void *pvParam)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800061e:	4809      	ldr	r0, [pc, #36]	@ (8000644 <vPulseLEDTask+0x34>)
 8000620:	f001 fa08 	bl	8001a34 <HAL_GPIO_WritePin>
		vTaskDelay(1000/portTICK_RATE_MS);
 8000624:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000628:	f004 f99a 	bl	8004960 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000632:	4804      	ldr	r0, [pc, #16]	@ (8000644 <vPulseLEDTask+0x34>)
 8000634:	f001 f9fe 	bl	8001a34 <HAL_GPIO_WritePin>
		vTaskDelay(1000/portTICK_RATE_MS);
 8000638:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063c:	f004 f990 	bl	8004960 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000640:	bf00      	nop
 8000642:	e7e9      	b.n	8000618 <vPulseLEDTask+0x8>
 8000644:	40020c00 	.word	0x40020c00

08000648 <vServo1Task>:
		//vTaskDelay(1/portTICK_RATE_MS);
	}
	vTaskDelete(NULL);
}*/
void vServo1Task(void *pvParam)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	/*__HAL_TIM_SET_COMPARE(&Dir_Servo_Tmr,Servo_R_F, Servo_R_F_POS);
	Servo_R_F_POS = 1180;*/
	while(1)
	{
		if(srm_cmd >= 21 && srm_cmd <= 23){
 8000650:	4b41      	ldr	r3, [pc, #260]	@ (8000758 <vServo1Task+0x110>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b14      	cmp	r3, #20
 8000656:	dd55      	ble.n	8000704 <vServo1Task+0xbc>
 8000658:	4b3f      	ldr	r3, [pc, #252]	@ (8000758 <vServo1Task+0x110>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b17      	cmp	r3, #23
 800065e:	dc51      	bgt.n	8000704 <vServo1Task+0xbc>
			if(srm_cmd == 21){
 8000660:	4b3d      	ldr	r3, [pc, #244]	@ (8000758 <vServo1Task+0x110>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b15      	cmp	r3, #21
 8000666:	d104      	bne.n	8000672 <vServo1Task+0x2a>
				Servo_R_F_POS_D = Servo_R_F_POS + Servo_R_F_POS;
 8000668:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <vServo1Task+0x114>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4a3c      	ldr	r2, [pc, #240]	@ (8000760 <vServo1Task+0x118>)
 8000670:	6013      	str	r3, [r2, #0]
			}


			if(Servo_R_F_POS<(800+Servo_R_F_POS_Err)){
 8000672:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <vServo1Task+0x11c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f203 321f 	addw	r2, r3, #799	@ 0x31f
 800067a:	4b38      	ldr	r3, [pc, #224]	@ (800075c <vServo1Task+0x114>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	db1d      	blt.n	80006be <vServo1Task+0x76>
				for(Servo_R_F_POS=Servo_R_F_POS; Servo_R_F_POS<=(800+Servo_R_F_POS_Err); Servo_R_F_POS++)
 8000682:	4b36      	ldr	r3, [pc, #216]	@ (800075c <vServo1Task+0x114>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a35      	ldr	r2, [pc, #212]	@ (800075c <vServo1Task+0x114>)
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	e00f      	b.n	80006ac <vServo1Task+0x64>
				{
					ServoOp = 0;
 800068c:	4b36      	ldr	r3, [pc, #216]	@ (8000768 <vServo1Task+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&Dir_Servo_Tmr,Servo_R_F, Servo_R_F_POS);
 8000692:	4b32      	ldr	r3, [pc, #200]	@ (800075c <vServo1Task+0x114>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b35      	ldr	r3, [pc, #212]	@ (800076c <vServo1Task+0x124>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	63da      	str	r2, [r3, #60]	@ 0x3c
					vTaskDelay(1/portTICK_RATE_MS);
 800069c:	2001      	movs	r0, #1
 800069e:	f004 f95f 	bl	8004960 <vTaskDelay>
				for(Servo_R_F_POS=Servo_R_F_POS; Servo_R_F_POS<=(800+Servo_R_F_POS_Err); Servo_R_F_POS++)
 80006a2:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <vServo1Task+0x114>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4a2c      	ldr	r2, [pc, #176]	@ (800075c <vServo1Task+0x114>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <vServo1Task+0x11c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f503 7248 	add.w	r2, r3, #800	@ 0x320
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <vServo1Task+0x114>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dae7      	bge.n	800068c <vServo1Task+0x44>
 80006bc:	e022      	b.n	8000704 <vServo1Task+0xbc>
				}
			}
			else if(Servo_R_F_POS>800){
 80006be:	4b27      	ldr	r3, [pc, #156]	@ (800075c <vServo1Task+0x114>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80006c6:	dd1a      	ble.n	80006fe <vServo1Task+0xb6>
				for(Servo_R_F_POS=Servo_R_F_POS; Servo_R_F_POS>=800; Servo_R_F_POS--)
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <vServo1Task+0x114>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a23      	ldr	r2, [pc, #140]	@ (800075c <vServo1Task+0x114>)
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	e00f      	b.n	80006f2 <vServo1Task+0xaa>
				{
					ServoOp = 0;
 80006d2:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <vServo1Task+0x120>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&Dir_Servo_Tmr,Servo_R_F, Servo_R_F_POS);
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <vServo1Task+0x114>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b23      	ldr	r3, [pc, #140]	@ (800076c <vServo1Task+0x124>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	63da      	str	r2, [r3, #60]	@ 0x3c
					vTaskDelay(1/portTICK_RATE_MS);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f004 f93c 	bl	8004960 <vTaskDelay>
				for(Servo_R_F_POS=Servo_R_F_POS; Servo_R_F_POS>=800; Servo_R_F_POS--)
 80006e8:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <vServo1Task+0x114>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <vServo1Task+0x114>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <vServo1Task+0x114>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80006fa:	daea      	bge.n	80006d2 <vServo1Task+0x8a>
 80006fc:	e002      	b.n	8000704 <vServo1Task+0xbc>
				}
			}
			else{
				ServoOp = 1;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <vServo1Task+0x120>)
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
			}
		}
		__HAL_TIM_SET_COMPARE(&Dir_Servo_Tmr,Servo_R_F, Servo_R_F_POS);
 8000704:	4b15      	ldr	r3, [pc, #84]	@ (800075c <vServo1Task+0x114>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <vServo1Task+0x124>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&Dir_Servo_Tmr,Servo_L_F, Servo_L_F_POS);
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <vServo1Task+0x128>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <vServo1Task+0x124>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&Dir_Servo_Tmr,Servo_R_R, Servo_R_R_POS);
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <vServo1Task+0x12c>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <vServo1Task+0x124>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(&Dir_Servo_Tmr,Servo_L_R, Servo_L_R_POS);
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <vServo1Task+0x130>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <vServo1Task+0x124>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000732:	4812      	ldr	r0, [pc, #72]	@ (800077c <vServo1Task+0x134>)
 8000734:	f001 f97e 	bl	8001a34 <HAL_GPIO_WritePin>
		vTaskDelay(1000/portTICK_RATE_MS);
 8000738:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073c:	f004 f910 	bl	8004960 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <vServo1Task+0x134>)
 8000748:	f001 f974 	bl	8001a34 <HAL_GPIO_WritePin>
		vTaskDelay(1000/portTICK_RATE_MS);
 800074c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000750:	f004 f906 	bl	8004960 <vTaskDelay>
		if(srm_cmd >= 21 && srm_cmd <= 23){
 8000754:	e77c      	b.n	8000650 <vServo1Task+0x8>
 8000756:	bf00      	nop
 8000758:	200003e0 	.word	0x200003e0
 800075c:	20000000 	.word	0x20000000
 8000760:	200003e4 	.word	0x200003e4
 8000764:	20000010 	.word	0x20000010
 8000768:	200003e8 	.word	0x200003e8
 800076c:	20000330 	.word	0x20000330
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004
 8000778:	2000000c 	.word	0x2000000c
 800077c:	40020c00 	.word	0x40020c00

08000780 <vLED4Task>:
		//vTaskDelay(1/portTICK_RATE_MS);
	}
	vTaskDelete(NULL);
}
void vLED4Task(void *pvParam)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(MainCMD <= 20)
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <vLED4Task+0x34>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b14      	cmp	r3, #20
 800078e:	dc04      	bgt.n	800079a <vLED4Task+0x1a>
		{
			dcm_cmd = MainCMD;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <vLED4Task+0x34>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <vLED4Task+0x38>)
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e7f6      	b.n	8000788 <vLED4Task+0x8>
		}
		else if(MainCMD >= 20 && MainCMD <=35)
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <vLED4Task+0x34>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b13      	cmp	r3, #19
 80007a0:	ddf2      	ble.n	8000788 <vLED4Task+0x8>
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <vLED4Task+0x34>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b23      	cmp	r3, #35	@ 0x23
 80007a8:	dcee      	bgt.n	8000788 <vLED4Task+0x8>
		{
			srm_cmd = MainCMD;
 80007aa:	4b02      	ldr	r3, [pc, #8]	@ (80007b4 <vLED4Task+0x34>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a03      	ldr	r2, [pc, #12]	@ (80007bc <vLED4Task+0x3c>)
 80007b0:	6013      	str	r3, [r2, #0]
		if(MainCMD <= 20)
 80007b2:	e7e9      	b.n	8000788 <vLED4Task+0x8>
 80007b4:	200003d8 	.word	0x200003d8
 80007b8:	200003dc 	.word	0x200003dc
 80007bc:	200003e0 	.word	0x200003e0

080007c0 <vDCMotorTask>:
	}
	vTaskDelete(NULL);
}

void vDCMotorTask(void *pvParam)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	//portTickType xLastWakeupTime = xTaskGetTickCount();
	while(1)
	{
		HAL_GPIO_WritePin(Motor_EN_Port, M_R_EN_A | M_R_EN_B | M_L_EN_A | M_L_EN_B, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80007ce:	48ab      	ldr	r0, [pc, #684]	@ (8000a7c <vDCMotorTask+0x2bc>)
 80007d0:	f001 f930 	bl	8001a34 <HAL_GPIO_WritePin>

		if		(dcm_cmd == 1) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_2, 1);	}
 80007d4:	4baa      	ldr	r3, [pc, #680]	@ (8000a80 <vDCMotorTask+0x2c0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10a      	bne.n	80007f2 <vDCMotorTask+0x32>
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	48a8      	ldr	r0, [pc, #672]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80007e2:	f001 f927 	bl	8001a34 <HAL_GPIO_WritePin>
 80007e6:	2201      	movs	r2, #1
 80007e8:	2102      	movs	r1, #2
 80007ea:	48a6      	ldr	r0, [pc, #664]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80007ec:	f001 f922 	bl	8001a34 <HAL_GPIO_WritePin>
 80007f0:	e7ea      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 2) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_2, 0);	}
 80007f2:	4ba3      	ldr	r3, [pc, #652]	@ (8000a80 <vDCMotorTask+0x2c0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d10a      	bne.n	8000810 <vDCMotorTask+0x50>
 80007fa:	2200      	movs	r2, #0
 80007fc:	2101      	movs	r1, #1
 80007fe:	48a1      	ldr	r0, [pc, #644]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000800:	f001 f918 	bl	8001a34 <HAL_GPIO_WritePin>
 8000804:	2200      	movs	r2, #0
 8000806:	2102      	movs	r1, #2
 8000808:	489e      	ldr	r0, [pc, #632]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800080a:	f001 f913 	bl	8001a34 <HAL_GPIO_WritePin>
 800080e:	e7db      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 3) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_2, 0);	}
 8000810:	4b9b      	ldr	r3, [pc, #620]	@ (8000a80 <vDCMotorTask+0x2c0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b03      	cmp	r3, #3
 8000816:	d10a      	bne.n	800082e <vDCMotorTask+0x6e>
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4899      	ldr	r0, [pc, #612]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800081e:	f001 f909 	bl	8001a34 <HAL_GPIO_WritePin>
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	4897      	ldr	r0, [pc, #604]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000828:	f001 f904 	bl	8001a34 <HAL_GPIO_WritePin>
 800082c:	e7cc      	b.n	80007c8 <vDCMotorTask+0x8>

		else if	(dcm_cmd == 4) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_2, 1);	}
 800082e:	4b94      	ldr	r3, [pc, #592]	@ (8000a80 <vDCMotorTask+0x2c0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b04      	cmp	r3, #4
 8000834:	d10a      	bne.n	800084c <vDCMotorTask+0x8c>
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4892      	ldr	r0, [pc, #584]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800083c:	f001 f8fa 	bl	8001a34 <HAL_GPIO_WritePin>
 8000840:	2201      	movs	r2, #1
 8000842:	2104      	movs	r1, #4
 8000844:	488f      	ldr	r0, [pc, #572]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000846:	f001 f8f5 	bl	8001a34 <HAL_GPIO_WritePin>
 800084a:	e7bd      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 5) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_2, 0);	}
 800084c:	4b8c      	ldr	r3, [pc, #560]	@ (8000a80 <vDCMotorTask+0x2c0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b05      	cmp	r3, #5
 8000852:	d10a      	bne.n	800086a <vDCMotorTask+0xaa>
 8000854:	2200      	movs	r2, #0
 8000856:	2108      	movs	r1, #8
 8000858:	488a      	ldr	r0, [pc, #552]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800085a:	f001 f8eb 	bl	8001a34 <HAL_GPIO_WritePin>
 800085e:	2200      	movs	r2, #0
 8000860:	2104      	movs	r1, #4
 8000862:	4888      	ldr	r0, [pc, #544]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000864:	f001 f8e6 	bl	8001a34 <HAL_GPIO_WritePin>
 8000868:	e7ae      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 6) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_2, 0);	}
 800086a:	4b85      	ldr	r3, [pc, #532]	@ (8000a80 <vDCMotorTask+0x2c0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b06      	cmp	r3, #6
 8000870:	d10a      	bne.n	8000888 <vDCMotorTask+0xc8>
 8000872:	2201      	movs	r2, #1
 8000874:	2108      	movs	r1, #8
 8000876:	4883      	ldr	r0, [pc, #524]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000878:	f001 f8dc 	bl	8001a34 <HAL_GPIO_WritePin>
 800087c:	2200      	movs	r2, #0
 800087e:	2104      	movs	r1, #4
 8000880:	4880      	ldr	r0, [pc, #512]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000882:	f001 f8d7 	bl	8001a34 <HAL_GPIO_WritePin>
 8000886:	e79f      	b.n	80007c8 <vDCMotorTask+0x8>

		else if	(dcm_cmd == 7) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_2, 1);	}
 8000888:	4b7d      	ldr	r3, [pc, #500]	@ (8000a80 <vDCMotorTask+0x2c0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b07      	cmp	r3, #7
 800088e:	d10a      	bne.n	80008a6 <vDCMotorTask+0xe6>
 8000890:	2200      	movs	r2, #0
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	487b      	ldr	r0, [pc, #492]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000896:	f001 f8cd 	bl	8001a34 <HAL_GPIO_WritePin>
 800089a:	2201      	movs	r2, #1
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	4879      	ldr	r0, [pc, #484]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80008a0:	f001 f8c8 	bl	8001a34 <HAL_GPIO_WritePin>
 80008a4:	e790      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 8) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_2, 0);	}
 80008a6:	4b76      	ldr	r3, [pc, #472]	@ (8000a80 <vDCMotorTask+0x2c0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b08      	cmp	r3, #8
 80008ac:	d10a      	bne.n	80008c4 <vDCMotorTask+0x104>
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	@ 0x40
 80008b2:	4874      	ldr	r0, [pc, #464]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80008b4:	f001 f8be 	bl	8001a34 <HAL_GPIO_WritePin>
 80008b8:	2200      	movs	r2, #0
 80008ba:	2180      	movs	r1, #128	@ 0x80
 80008bc:	4871      	ldr	r0, [pc, #452]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80008be:	f001 f8b9 	bl	8001a34 <HAL_GPIO_WritePin>
 80008c2:	e781      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 9) {		HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_2, 0);	}
 80008c4:	4b6e      	ldr	r3, [pc, #440]	@ (8000a80 <vDCMotorTask+0x2c0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b09      	cmp	r3, #9
 80008ca:	d10a      	bne.n	80008e2 <vDCMotorTask+0x122>
 80008cc:	2201      	movs	r2, #1
 80008ce:	2140      	movs	r1, #64	@ 0x40
 80008d0:	486c      	ldr	r0, [pc, #432]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80008d2:	f001 f8af 	bl	8001a34 <HAL_GPIO_WritePin>
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	486a      	ldr	r0, [pc, #424]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80008dc:	f001 f8aa 	bl	8001a34 <HAL_GPIO_WritePin>
 80008e0:	e772      	b.n	80007c8 <vDCMotorTask+0x8>

		else if	(dcm_cmd == 10){		HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_2, 1);	}
 80008e2:	4b67      	ldr	r3, [pc, #412]	@ (8000a80 <vDCMotorTask+0x2c0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b0a      	cmp	r3, #10
 80008e8:	d10a      	bne.n	8000900 <vDCMotorTask+0x140>
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	4865      	ldr	r0, [pc, #404]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80008f0:	f001 f8a0 	bl	8001a34 <HAL_GPIO_WritePin>
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4862      	ldr	r0, [pc, #392]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80008fa:	f001 f89b 	bl	8001a34 <HAL_GPIO_WritePin>
 80008fe:	e763      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 11){		HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_2, 0);	}
 8000900:	4b5f      	ldr	r3, [pc, #380]	@ (8000a80 <vDCMotorTask+0x2c0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b0b      	cmp	r3, #11
 8000906:	d10a      	bne.n	800091e <vDCMotorTask+0x15e>
 8000908:	2200      	movs	r2, #0
 800090a:	2120      	movs	r1, #32
 800090c:	485d      	ldr	r0, [pc, #372]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800090e:	f001 f891 	bl	8001a34 <HAL_GPIO_WritePin>
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	485b      	ldr	r0, [pc, #364]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000918:	f001 f88c 	bl	8001a34 <HAL_GPIO_WritePin>
 800091c:	e754      	b.n	80007c8 <vDCMotorTask+0x8>
		else if	(dcm_cmd == 12){		HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_2, 0);	}
 800091e:	4b58      	ldr	r3, [pc, #352]	@ (8000a80 <vDCMotorTask+0x2c0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b0c      	cmp	r3, #12
 8000924:	d10a      	bne.n	800093c <vDCMotorTask+0x17c>
 8000926:	2201      	movs	r2, #1
 8000928:	2120      	movs	r1, #32
 800092a:	4856      	ldr	r0, [pc, #344]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800092c:	f001 f882 	bl	8001a34 <HAL_GPIO_WritePin>
 8000930:	2200      	movs	r2, #0
 8000932:	2110      	movs	r1, #16
 8000934:	4853      	ldr	r0, [pc, #332]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000936:	f001 f87d 	bl	8001a34 <HAL_GPIO_WritePin>
 800093a:	e745      	b.n	80007c8 <vDCMotorTask+0x8>

		else if(dcm_cmd == 13){
 800093c:	4b50      	ldr	r3, [pc, #320]	@ (8000a80 <vDCMotorTask+0x2c0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b0d      	cmp	r3, #13
 8000942:	d12e      	bne.n	80009a2 <vDCMotorTask+0x1e2>
			HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_2, 1);
 8000944:	2200      	movs	r2, #0
 8000946:	2101      	movs	r1, #1
 8000948:	484e      	ldr	r0, [pc, #312]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800094a:	f001 f873 	bl	8001a34 <HAL_GPIO_WritePin>
 800094e:	2201      	movs	r2, #1
 8000950:	2102      	movs	r1, #2
 8000952:	484c      	ldr	r0, [pc, #304]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000954:	f001 f86e 	bl	8001a34 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_2, 1);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	4849      	ldr	r0, [pc, #292]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800095e:	f001 f869 	bl	8001a34 <HAL_GPIO_WritePin>
 8000962:	2201      	movs	r2, #1
 8000964:	2104      	movs	r1, #4
 8000966:	4847      	ldr	r0, [pc, #284]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000968:	f001 f864 	bl	8001a34 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_2, 1);
 800096c:	2200      	movs	r2, #0
 800096e:	2140      	movs	r1, #64	@ 0x40
 8000970:	4844      	ldr	r0, [pc, #272]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000972:	f001 f85f 	bl	8001a34 <HAL_GPIO_WritePin>
 8000976:	2201      	movs	r2, #1
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	4842      	ldr	r0, [pc, #264]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800097c:	f001 f85a 	bl	8001a34 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_2, 1);
 8000980:	2200      	movs	r2, #0
 8000982:	2120      	movs	r1, #32
 8000984:	483f      	ldr	r0, [pc, #252]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000986:	f001 f855 	bl	8001a34 <HAL_GPIO_WritePin>
 800098a:	2201      	movs	r2, #1
 800098c:	2110      	movs	r1, #16
 800098e:	483d      	ldr	r0, [pc, #244]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000990:	f001 f850 	bl	8001a34 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800099a:	483a      	ldr	r0, [pc, #232]	@ (8000a84 <vDCMotorTask+0x2c4>)
 800099c:	f001 f84a 	bl	8001a34 <HAL_GPIO_WritePin>
 80009a0:	e712      	b.n	80007c8 <vDCMotorTask+0x8>
		}

		else if(dcm_cmd == 14){
 80009a2:	4b37      	ldr	r3, [pc, #220]	@ (8000a80 <vDCMotorTask+0x2c0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b0e      	cmp	r3, #14
 80009a8:	d12e      	bne.n	8000a08 <vDCMotorTask+0x248>
			HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_2, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	4835      	ldr	r0, [pc, #212]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009b0:	f001 f840 	bl	8001a34 <HAL_GPIO_WritePin>
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	4832      	ldr	r0, [pc, #200]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009ba:	f001 f83b 	bl	8001a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_2, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2108      	movs	r1, #8
 80009c2:	4830      	ldr	r0, [pc, #192]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009c4:	f001 f836 	bl	8001a34 <HAL_GPIO_WritePin>
 80009c8:	2200      	movs	r2, #0
 80009ca:	2104      	movs	r1, #4
 80009cc:	482d      	ldr	r0, [pc, #180]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009ce:	f001 f831 	bl	8001a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_2, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2140      	movs	r1, #64	@ 0x40
 80009d6:	482b      	ldr	r0, [pc, #172]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009d8:	f001 f82c 	bl	8001a34 <HAL_GPIO_WritePin>
 80009dc:	2200      	movs	r2, #0
 80009de:	2180      	movs	r1, #128	@ 0x80
 80009e0:	4828      	ldr	r0, [pc, #160]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009e2:	f001 f827 	bl	8001a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_1, 0);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_2, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	4826      	ldr	r0, [pc, #152]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009ec:	f001 f822 	bl	8001a34 <HAL_GPIO_WritePin>
 80009f0:	2200      	movs	r2, #0
 80009f2:	2110      	movs	r1, #16
 80009f4:	4823      	ldr	r0, [pc, #140]	@ (8000a84 <vDCMotorTask+0x2c4>)
 80009f6:	f001 f81d 	bl	8001a34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a00:	4820      	ldr	r0, [pc, #128]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a02:	f001 f817 	bl	8001a34 <HAL_GPIO_WritePin>
 8000a06:	e6df      	b.n	80007c8 <vDCMotorTask+0x8>
		}

		else if(dcm_cmd == 15){
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <vDCMotorTask+0x2c0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d128      	bne.n	8000a62 <vDCMotorTask+0x2a2>
			HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_F_In_2, 0);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	481b      	ldr	r0, [pc, #108]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a16:	f001 f80d 	bl	8001a34 <HAL_GPIO_WritePin>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a20:	f001 f808 	bl	8001a34 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_R_R_In_2, 0);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2108      	movs	r1, #8
 8000a28:	4816      	ldr	r0, [pc, #88]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a2a:	f001 f803 	bl	8001a34 <HAL_GPIO_WritePin>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2104      	movs	r1, #4
 8000a32:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a34:	f000 fffe 	bl	8001a34 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_F_In_2, 0);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2140      	movs	r1, #64	@ 0x40
 8000a3c:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a3e:	f000 fff9 	bl	8001a34 <HAL_GPIO_WritePin>
 8000a42:	2200      	movs	r2, #0
 8000a44:	2180      	movs	r1, #128	@ 0x80
 8000a46:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a48:	f000 fff4 	bl	8001a34 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_1, 1);	HAL_GPIO_WritePin(Motor_Pin_Port, M_L_R_In_2, 0);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2120      	movs	r1, #32
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a52:	f000 ffef 	bl	8001a34 <HAL_GPIO_WritePin>
 8000a56:	2200      	movs	r2, #0
 8000a58:	2110      	movs	r1, #16
 8000a5a:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a5c:	f000 ffea 	bl	8001a34 <HAL_GPIO_WritePin>
 8000a60:	e6b2      	b.n	80007c8 <vDCMotorTask+0x8>
		  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
		}

		else if(dcm_cmd == 0 ){	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, 0);	}
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <vDCMotorTask+0x2c0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f47f aeae 	bne.w	80007c8 <vDCMotorTask+0x8>
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000a72:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <vDCMotorTask+0x2c4>)
 8000a74:	f000 ffde 	bl	8001a34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_EN_Port, M_R_EN_A | M_R_EN_B | M_L_EN_A | M_L_EN_B, 1);
 8000a78:	e6a6      	b.n	80007c8 <vDCMotorTask+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	200003dc 	.word	0x200003dc
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b090      	sub	sp, #64	@ 0x40
 8000a8c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char str[20] = "Hello DESD\r\n";
 8000a8e:	4b46      	ldr	r3, [pc, #280]	@ (8000ba8 <main+0x120>)
 8000a90:	f107 0420 	add.w	r4, r7, #32
 8000a94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a96:	c407      	stmia	r4!, {r0, r1, r2}
 8000a98:	7023      	strb	r3, [r4, #0]
 8000a9a:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	f8c3 2003 	str.w	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa6:	f000 fc73 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aaa:	f000 f899 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aae:	f000 f9c3 	bl	8000e38 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ab2:	f000 f8ff 	bl	8000cb4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ab6:	f000 f995 	bl	8000de4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)str, strlen(str));
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fb86 	bl	80001d0 <strlen>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4619      	mov	r1, r3
 8000ace:	4837      	ldr	r0, [pc, #220]	@ (8000bac <main+0x124>)
 8000ad0:	f002 fd14 	bl	80034fc <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT (&huart2, (uint8_t *)&str1, 3);
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	4936      	ldr	r1, [pc, #216]	@ (8000bb0 <main+0x128>)
 8000ad8:	4834      	ldr	r0, [pc, #208]	@ (8000bac <main+0x124>)
 8000ada:	f002 fd45 	bl	8003568 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&Dir_Servo_Tmr, Servo_R_F);
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4834      	ldr	r0, [pc, #208]	@ (8000bb4 <main+0x12c>)
 8000ae2:	f001 fda5 	bl	8002630 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&Dir_Servo_Tmr, Servo_R_R);
 8000ae6:	210c      	movs	r1, #12
 8000ae8:	4832      	ldr	r0, [pc, #200]	@ (8000bb4 <main+0x12c>)
 8000aea:	f001 fda1 	bl	8002630 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&Dir_Servo_Tmr, Servo_L_F);
 8000aee:	2104      	movs	r1, #4
 8000af0:	4830      	ldr	r0, [pc, #192]	@ (8000bb4 <main+0x12c>)
 8000af2:	f001 fd9d 	bl	8002630 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&Dir_Servo_Tmr, Servo_L_R);
 8000af6:	2100      	movs	r1, #0
 8000af8:	482e      	ldr	r0, [pc, #184]	@ (8000bb4 <main+0x12c>)
 8000afa:	f001 fd99 	bl	8002630 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000afe:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <main+0x130>)
 8000b00:	1d3c      	adds	r4, r7, #4
 8000b02:	461d      	mov	r5, r3
 8000b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fc60 	bl	80043da <osThreadCreate>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a27      	ldr	r2, [pc, #156]	@ (8000bbc <main+0x134>)
 8000b1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	xRet = xTaskCreate(vPulseLEDTask, "Task1", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 8000b20:	2300      	movs	r3, #0
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	2305      	movs	r3, #5
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	4924      	ldr	r1, [pc, #144]	@ (8000bc0 <main+0x138>)
 8000b2e:	4825      	ldr	r0, [pc, #148]	@ (8000bc4 <main+0x13c>)
 8000b30:	f003 fdc7 	bl	80046c2 <xTaskCreate>
 8000b34:	6378      	str	r0, [r7, #52]	@ 0x34
	if(xRet!=pdTRUE)
 8000b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d001      	beq.n	8000b40 <main+0xb8>
	{
		Error_Handler();
 8000b3c:	f000 fa0b 	bl	8000f56 <Error_Handler>
	}
	xRet = xTaskCreate(vDCMotorTask, "Task2", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 8000b40:	2300      	movs	r3, #0
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	2305      	movs	r3, #5
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	491e      	ldr	r1, [pc, #120]	@ (8000bc8 <main+0x140>)
 8000b4e:	481f      	ldr	r0, [pc, #124]	@ (8000bcc <main+0x144>)
 8000b50:	f003 fdb7 	bl	80046c2 <xTaskCreate>
 8000b54:	6378      	str	r0, [r7, #52]	@ 0x34
	if(xRet!=pdTRUE)
 8000b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d001      	beq.n	8000b60 <main+0xd8>
	{
		Error_Handler();
 8000b5c:	f000 f9fb 	bl	8000f56 <Error_Handler>
	/*xRet = xTaskCreate(vLED3Task, "Task3", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
	if(xRet!=pdTRUE)
	{
		Error_Handler();
	}*/
	xRet = xTaskCreate(vLED4Task, "Task4", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 8000b60:	2300      	movs	r3, #0
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	2305      	movs	r3, #5
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2280      	movs	r2, #128	@ 0x80
 8000b6c:	4918      	ldr	r1, [pc, #96]	@ (8000bd0 <main+0x148>)
 8000b6e:	4819      	ldr	r0, [pc, #100]	@ (8000bd4 <main+0x14c>)
 8000b70:	f003 fda7 	bl	80046c2 <xTaskCreate>
 8000b74:	6378      	str	r0, [r7, #52]	@ 0x34
	if(xRet!=pdTRUE)
 8000b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d001      	beq.n	8000b80 <main+0xf8>
	{
		Error_Handler();
 8000b7c:	f000 f9eb 	bl	8000f56 <Error_Handler>
	}
	xRet = xTaskCreate(vServo1Task, "Servo1", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
 8000b80:	2300      	movs	r3, #0
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	2305      	movs	r3, #5
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2280      	movs	r2, #128	@ 0x80
 8000b8c:	4912      	ldr	r1, [pc, #72]	@ (8000bd8 <main+0x150>)
 8000b8e:	4813      	ldr	r0, [pc, #76]	@ (8000bdc <main+0x154>)
 8000b90:	f003 fd97 	bl	80046c2 <xTaskCreate>
 8000b94:	6378      	str	r0, [r7, #52]	@ 0x34
	if(xRet!=pdTRUE)
 8000b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d001      	beq.n	8000ba0 <main+0x118>
	{
		Error_Handler();
 8000b9c:	f000 f9db 	bl	8000f56 <Error_Handler>
	}

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ba0:	f003 fc14 	bl	80043cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <main+0x11c>
 8000ba8:	080063ec 	.word	0x080063ec
 8000bac:	20000378 	.word	0x20000378
 8000bb0:	200003c4 	.word	0x200003c4
 8000bb4:	20000330 	.word	0x20000330
 8000bb8:	0800640c 	.word	0x0800640c
 8000bbc:	200003c0 	.word	0x200003c0
 8000bc0:	080063cc 	.word	0x080063cc
 8000bc4:	08000611 	.word	0x08000611
 8000bc8:	080063d4 	.word	0x080063d4
 8000bcc:	080007c1 	.word	0x080007c1
 8000bd0:	080063dc 	.word	0x080063dc
 8000bd4:	08000781 	.word	0x08000781
 8000bd8:	080063e4 	.word	0x080063e4
 8000bdc:	08000649 	.word	0x08000649

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	@ 0x50
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	2230      	movs	r2, #48	@ 0x30
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 ff08 	bl	8005a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <SystemClock_Config+0xcc>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <SystemClock_Config+0xcc>)
 8000c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c14:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <SystemClock_Config+0xcc>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <SystemClock_Config+0xd0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <SystemClock_Config+0xd0>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <SystemClock_Config+0xd0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	2310      	movs	r3, #16
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c50:	2308      	movs	r3, #8
 8000c52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c54:	2332      	movs	r3, #50	@ 0x32
 8000c56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 feff 	bl	8001a68 <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c70:	f000 f971 	bl	8000f56 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c74:	230f      	movs	r3, #15
 8000c76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f960 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c9e:	f000 f95a 	bl	8000f56 <Error_Handler>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3750      	adds	r7, #80	@ 0x50
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	@ 0x38
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	615a      	str	r2, [r3, #20]
 8000ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000ce6:	4a3e      	ldr	r2, [pc, #248]	@ (8000de0 <MX_TIM3_Init+0x12c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000cea:	4b3c      	ldr	r3, [pc, #240]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000cec:	220f      	movs	r2, #15
 8000cee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000cf6:	4b39      	ldr	r3, [pc, #228]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000cf8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b35      	ldr	r3, [pc, #212]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0a:	4834      	ldr	r0, [pc, #208]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d0c:	f001 fb76 	bl	80023fc <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d16:	f000 f91e 	bl	8000f56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d24:	4619      	mov	r1, r3
 8000d26:	482d      	ldr	r0, [pc, #180]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d28:	f001 fefc 	bl	8002b24 <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d32:	f000 f910 	bl	8000f56 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d36:	4829      	ldr	r0, [pc, #164]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d38:	f001 fc20 	bl	800257c <HAL_TIM_PWM_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d42:	f000 f908 	bl	8000f56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	4619      	mov	r1, r3
 8000d54:	4821      	ldr	r0, [pc, #132]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d56:	f002 faf1 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d60:	f000 f8f9 	bl	8000f56 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d64:	2360      	movs	r3, #96	@ 0x60
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4818      	ldr	r0, [pc, #96]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d7c:	f001 fe10 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d86:	f000 f8e6 	bl	8000f56 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4812      	ldr	r0, [pc, #72]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000d92:	f001 fe05 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d9c:	f000 f8db 	bl	8000f56 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2208      	movs	r2, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000da8:	f001 fdfa 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000db2:	f000 f8d0 	bl	8000f56 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	220c      	movs	r2, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000dbe:	f001 fdef 	bl	80029a0 <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000dc8:	f000 f8c5 	bl	8000f56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <MX_TIM3_Init+0x128>)
 8000dce:	f000 f917 	bl	8001000 <HAL_TIM_MspPostInit>

}
 8000dd2:	bf00      	nop
 8000dd4:	3738      	adds	r7, #56	@ 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000330 	.word	0x20000330
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f002 fb1e 	bl	800345c <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f896 	bl	8000f56 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000378 	.word	0x20000378
 8000e34:	40004400 	.word	0x40004400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a31      	ldr	r2, [pc, #196]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a2a      	ldr	r2, [pc, #168]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a23      	ldr	r2, [pc, #140]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e90:	f043 0310 	orr.w	r3, r3, #16
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_GPIO_Init+0xe4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000ec4:	4816      	ldr	r0, [pc, #88]	@ (8000f20 <MX_GPIO_Init+0xe8>)
 8000ec6:	f000 fdb5 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f24f 01ff 	movw	r1, #61695	@ 0xf0ff
 8000ed0:	4814      	ldr	r0, [pc, #80]	@ (8000f24 <MX_GPIO_Init+0xec>)
 8000ed2:	f000 fdaf 	bl	8001a34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ed6:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <MX_GPIO_Init+0xe8>)
 8000ef0:	f000 fc04 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000ef4:	f24f 03ff 	movw	r3, #61695	@ 0xf0ff
 8000ef8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <MX_GPIO_Init+0xec>)
 8000f0e:	f000 fbf5 	bl	80016fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020c00 	.word	0x40020c00

08000f28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f003 fa9e 	bl	8004472 <osDelay>
 8000f36:	e7fb      	b.n	8000f30 <StartDefaultTask+0x8>

08000f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f48:	d101      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4a:	f000 fa43 	bl	80013d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5a:	b672      	cpsid	i
}
 8000f5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5e:	bf00      	nop
 8000f60:	e7fd      	b.n	8000f5e <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_MspInit+0x54>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	4a11      	ldr	r2, [pc, #68]	@ (8000fb8 <HAL_MspInit+0x54>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_MspInit+0x54>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_MspInit+0x54>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_MspInit+0x54>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <HAL_MspInit+0x54>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	f06f 0001 	mvn.w	r0, #1
 8000faa:	f000 faeb 	bl	8001584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10d      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_TIM_Base_MspInit+0x40>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a09      	ldr	r2, [pc, #36]	@ (8000ffc <HAL_TIM_Base_MspInit+0x40>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <HAL_TIM_Base_MspInit+0x40>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40000400 	.word	0x40000400
 8000ffc:	40023800 	.word	0x40023800

08001000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a21      	ldr	r2, [pc, #132]	@ (80010a4 <HAL_TIM_MspPostInit+0xa4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d13b      	bne.n	800109a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <HAL_TIM_MspPostInit+0xa8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <HAL_TIM_MspPostInit+0xa8>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_TIM_MspPostInit+0xa8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_TIM_MspPostInit+0xa8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <HAL_TIM_MspPostInit+0xa8>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_TIM_MspPostInit+0xa8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800106a:	2302      	movs	r3, #2
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_TIM_MspPostInit+0xac>)
 8001076:	f000 fb41 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800107a:	2303      	movs	r3, #3
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800108a:	2302      	movs	r3, #2
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <HAL_TIM_MspPostInit+0xb0>)
 8001096:	f000 fb31 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40000400 	.word	0x40000400
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <HAL_UART_MspInit+0x94>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d133      	bne.n	800113e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a14      	ldr	r2, [pc, #80]	@ (800114c <HAL_UART_MspInit+0x98>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_UART_MspInit+0x98>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <HAL_UART_MspInit+0x9c>)
 800112a:	f000 fae7 	bl	80016fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2105      	movs	r1, #5
 8001132:	2026      	movs	r0, #38	@ 0x26
 8001134:	f000 fa26 	bl	8001584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001138:	2026      	movs	r0, #38	@ 0x26
 800113a:	f000 fa3f 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b34      	ldr	r3, [pc, #208]	@ (800123c <HAL_InitTick+0xe8>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a33      	ldr	r2, [pc, #204]	@ (800123c <HAL_InitTick+0xe8>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b31      	ldr	r3, [pc, #196]	@ (800123c <HAL_InitTick+0xe8>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001180:	f107 0210 	add.w	r2, r7, #16
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f001 f904 	bl	8002398 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800119a:	f001 f8d5 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 800119e:	6378      	str	r0, [r7, #52]	@ 0x34
 80011a0:	e004      	b.n	80011ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011a2:	f001 f8d1 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 80011a6:	4603      	mov	r3, r0
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ae:	4a24      	ldr	r2, [pc, #144]	@ (8001240 <HAL_InitTick+0xec>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	0c9b      	lsrs	r3, r3, #18
 80011b6:	3b01      	subs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80011ba:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <HAL_InitTick+0xf0>)
 80011bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_InitTick+0xf0>)
 80011c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011c8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80011ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <HAL_InitTick+0xf0>)
 80011cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ce:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <HAL_InitTick+0xf0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_InitTick+0xf0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_InitTick+0xf0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80011e2:	4818      	ldr	r0, [pc, #96]	@ (8001244 <HAL_InitTick+0xf0>)
 80011e4:	f001 f90a 	bl	80023fc <HAL_TIM_Base_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d11b      	bne.n	800122e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <HAL_InitTick+0xf0>)
 80011f8:	f001 f950 	bl	800249c <HAL_TIM_Base_Start_IT>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001202:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001206:	2b00      	cmp	r3, #0
 8001208:	d111      	bne.n	800122e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800120a:	201c      	movs	r0, #28
 800120c:	f000 f9d6 	bl	80015bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	d808      	bhi.n	8001228 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001216:	2200      	movs	r2, #0
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	201c      	movs	r0, #28
 800121c:	f000 f9b2 	bl	8001584 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001220:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_InitTick+0xf4>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e002      	b.n	800122e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800122e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001232:	4618      	mov	r0, r3
 8001234:	3738      	adds	r7, #56	@ 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	431bde83 	.word	0x431bde83
 8001244:	200003ec 	.word	0x200003ec
 8001248:	20000018 	.word	0x20000018

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <TIM2_IRQHandler+0x10>)
 800128a:	f001 fa99 	bl	80027c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200003ec 	.word	0x200003ec

08001298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <USART2_IRQHandler+0x10>)
 800129e:	f002 f989 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000378 	.word	0x20000378

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f004 fbf0 	bl	8005ac0 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20020000 	.word	0x20020000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000434 	.word	0x20000434
 8001314:	200042d8 	.word	0x200042d8

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001374 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001340:	f7ff ffea 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	@ (8001388 <LoopFillZerobss+0x22>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f004 fbaf 	bl	8005acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fb8b 	bl	8000a88 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001380:	0800658c 	.word	0x0800658c
  ldr r2, =_sbss
 8001384:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001388:	200042d8 	.word	0x200042d8

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f8d8 	bl	800156e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	200f      	movs	r0, #15
 80013c0:	f7ff fec8 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fdce 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000001c 	.word	0x2000001c
 80013f8:	20000438 	.word	0x20000438

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000438 	.word	0x20000438

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4907      	ldr	r1, [pc, #28]	@ (80014b0 <__NVIC_EnableIRQ+0x38>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	@ (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	@ (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	@ 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff4c 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001596:	f7ff ff61 	bl	800145c <__NVIC_GetPriorityGrouping>
 800159a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f7ff ffb1 	bl	8001508 <NVIC_EncodePriority>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff80 	bl	80014b4 <__NVIC_SetPriority>
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff54 	bl	8001478 <__NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015e6:	f7ff ff09 	bl	80013fc <HAL_GetTick>
 80015ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e052      	b.n	80016b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0216 	bic.w	r2, r2, #22
 8001618:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001628:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <HAL_DMA_Abort+0x62>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0208 	bic.w	r2, r2, #8
 8001648:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165a:	e013      	b.n	8001684 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165c:	f7ff fece 	bl	80013fc <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b05      	cmp	r3, #5
 8001668:	d90c      	bls.n	8001684 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2220      	movs	r2, #32
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e015      	b.n	80016b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e4      	bne.n	800165c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001696:	223f      	movs	r2, #63	@ 0x3f
 8001698:	409a      	lsls	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d004      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2280      	movs	r2, #128	@ 0x80
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00c      	b.n	80016f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2205      	movs	r2, #5
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e16b      	b.n	80019f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 815a 	bne.w	80019ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	2b02      	cmp	r3, #2
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d017      	beq.n	80017ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80b4 	beq.w	80019ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b60      	ldr	r3, [pc, #384]	@ (8001a08 <HAL_GPIO_Init+0x30c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a5f      	ldr	r2, [pc, #380]	@ (8001a08 <HAL_GPIO_Init+0x30c>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b5d      	ldr	r3, [pc, #372]	@ (8001a08 <HAL_GPIO_Init+0x30c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189e:	4a5b      	ldr	r2, [pc, #364]	@ (8001a0c <HAL_GPIO_Init+0x310>)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	3302      	adds	r3, #2
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a52      	ldr	r2, [pc, #328]	@ (8001a10 <HAL_GPIO_Init+0x314>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d02b      	beq.n	8001922 <HAL_GPIO_Init+0x226>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <HAL_GPIO_Init+0x318>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d025      	beq.n	800191e <HAL_GPIO_Init+0x222>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a50      	ldr	r2, [pc, #320]	@ (8001a18 <HAL_GPIO_Init+0x31c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01f      	beq.n	800191a <HAL_GPIO_Init+0x21e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4f      	ldr	r2, [pc, #316]	@ (8001a1c <HAL_GPIO_Init+0x320>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d019      	beq.n	8001916 <HAL_GPIO_Init+0x21a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a20 <HAL_GPIO_Init+0x324>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0x216>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001a24 <HAL_GPIO_Init+0x328>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00d      	beq.n	800190e <HAL_GPIO_Init+0x212>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001a28 <HAL_GPIO_Init+0x32c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d007      	beq.n	800190a <HAL_GPIO_Init+0x20e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4b      	ldr	r2, [pc, #300]	@ (8001a2c <HAL_GPIO_Init+0x330>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_GPIO_Init+0x20a>
 8001902:	2307      	movs	r3, #7
 8001904:	e00e      	b.n	8001924 <HAL_GPIO_Init+0x228>
 8001906:	2308      	movs	r3, #8
 8001908:	e00c      	b.n	8001924 <HAL_GPIO_Init+0x228>
 800190a:	2306      	movs	r3, #6
 800190c:	e00a      	b.n	8001924 <HAL_GPIO_Init+0x228>
 800190e:	2305      	movs	r3, #5
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x228>
 8001912:	2304      	movs	r3, #4
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x228>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x228>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x228>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x228>
 8001922:	2300      	movs	r3, #0
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001934:	4935      	ldr	r1, [pc, #212]	@ (8001a0c <HAL_GPIO_Init+0x310>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001942:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001966:	4a32      	ldr	r2, [pc, #200]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800196c:	4b30      	ldr	r3, [pc, #192]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001990:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e4:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	f67f ae90 	bls.w	8001718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	40021c00 	.word	0x40021c00
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e267      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d075      	beq.n	8001b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a86:	4b88      	ldr	r3, [pc, #544]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d00c      	beq.n	8001aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b85      	ldr	r3, [pc, #532]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d112      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9e:	4b82      	ldr	r3, [pc, #520]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	4b7e      	ldr	r3, [pc, #504]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d05b      	beq.n	8001b70 <HAL_RCC_OscConfig+0x108>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d157      	bne.n	8001b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e242      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001acc:	d106      	bne.n	8001adc <HAL_RCC_OscConfig+0x74>
 8001ace:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b70      	ldr	r3, [pc, #448]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6f      	ldr	r2, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6c      	ldr	r2, [pc, #432]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xb0>
 8001b00:	4b69      	ldr	r3, [pc, #420]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a68      	ldr	r2, [pc, #416]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a65      	ldr	r2, [pc, #404]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc6c 	bl	80013fc <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fc68 	bl	80013fc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e207      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xc0>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fc58 	bl	80013fc <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fc54 	bl	80013fc <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	@ 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1f3      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b51      	ldr	r3, [pc, #324]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0xe8>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x152>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1c7      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4937      	ldr	r1, [pc, #220]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <HAL_RCC_OscConfig+0x244>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff fc0d 	bl	80013fc <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fc09 	bl	80013fc <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1a8      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4925      	ldr	r1, [pc, #148]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_RCC_OscConfig+0x244>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fbec 	bl	80013fc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fbe8 	bl	80013fc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e187      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d036      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_RCC_OscConfig+0x248>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff fbcc 	bl	80013fc <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff fbc8 	bl	80013fc <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e167      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x200>
 8001c86:	e01b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_RCC_OscConfig+0x248>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fbb5 	bl	80013fc <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fbb1 	bl	80013fc <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d907      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e150      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	42470000 	.word	0x42470000
 8001cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	4b88      	ldr	r3, [pc, #544]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ea      	bne.n	8001c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8097 	beq.w	8001dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b81      	ldr	r3, [pc, #516]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10f      	bne.n	8001cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b77      	ldr	r3, [pc, #476]	@ (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b74      	ldr	r3, [pc, #464]	@ (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a73      	ldr	r2, [pc, #460]	@ (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb71 	bl	80013fc <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff fb6d 	bl	80013fc <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e10c      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b6a      	ldr	r3, [pc, #424]	@ (8001edc <HAL_RCC_OscConfig+0x474>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2ea>
 8001d44:	4b64      	ldr	r3, [pc, #400]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a63      	ldr	r2, [pc, #396]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x324>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x30c>
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0x324>
 8001d74:	4b58      	ldr	r3, [pc, #352]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a57      	ldr	r2, [pc, #348]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d80:	4b55      	ldr	r3, [pc, #340]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a54      	ldr	r2, [pc, #336]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fb32 	bl	80013fc <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fb2e 	bl	80013fc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0cb      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ee      	beq.n	8001d9c <HAL_RCC_OscConfig+0x334>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fb1c 	bl	80013fc <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fb18 	bl	80013fc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0b5      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ee      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df0:	4b39      	ldr	r3, [pc, #228]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	4a38      	ldr	r2, [pc, #224]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a1 	beq.w	8001f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e06:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d05c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d141      	bne.n	8001e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_RCC_OscConfig+0x478>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff faec 	bl	80013fc <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff fae8 	bl	80013fc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e087      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	491b      	ldr	r1, [pc, #108]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <HAL_RCC_OscConfig+0x478>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff fac1 	bl	80013fc <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff fabd 	bl	80013fc <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e05c      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x416>
 8001e9c:	e054      	b.n	8001f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff faaa 	bl	80013fc <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff faa6 	bl	80013fc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e045      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x444>
 8001eca:	e03d      	b.n	8001f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e038      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x4ec>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d028      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d121      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d11a      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d111      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0cc      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b68      	ldr	r3, [pc, #416]	@ (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d90c      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b65      	ldr	r3, [pc, #404]	@ (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b63      	ldr	r3, [pc, #396]	@ (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0b8      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fac:	4b59      	ldr	r3, [pc, #356]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc4:	4b53      	ldr	r3, [pc, #332]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b50      	ldr	r3, [pc, #320]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	494d      	ldr	r1, [pc, #308]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d044      	beq.n	8002078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d119      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e07f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d003      	beq.n	8002016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002012:	2b03      	cmp	r3, #3
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b3f      	ldr	r3, [pc, #252]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e067      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4934      	ldr	r1, [pc, #208]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff f9d8 	bl	80013fc <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7ff f9d4 	bl	80013fc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e04f      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2b      	ldr	r3, [pc, #172]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b25      	ldr	r3, [pc, #148]	@ (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d20c      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e032      	b.n	8002106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ac:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4916      	ldr	r1, [pc, #88]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ca:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	490e      	ldr	r1, [pc, #56]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020de:	f000 f821 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	490a      	ldr	r1, [pc, #40]	@ (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	5ccb      	ldrb	r3, [r1, r3]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	4a09      	ldr	r2, [pc, #36]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f828 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00
 8002114:	40023800 	.word	0x40023800
 8002118:	08006430 	.word	0x08006430
 800211c:	20000014 	.word	0x20000014
 8002120:	20000018 	.word	0x20000018

08002124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002128:	b094      	sub	sp, #80	@ 0x50
 800212a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002130:	2300      	movs	r3, #0
 8002132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002134:	2300      	movs	r3, #0
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213c:	4b79      	ldr	r3, [pc, #484]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b08      	cmp	r3, #8
 8002146:	d00d      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x40>
 8002148:	2b08      	cmp	r3, #8
 800214a:	f200 80e1 	bhi.w	8002310 <HAL_RCC_GetSysClockFreq+0x1ec>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x34>
 8002152:	2b04      	cmp	r3, #4
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x3a>
 8002156:	e0db      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b73      	ldr	r3, [pc, #460]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x204>)
 800215a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800215c:	e0db      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800215e:	4b73      	ldr	r3, [pc, #460]	@ (800232c <HAL_RCC_GetSysClockFreq+0x208>)
 8002160:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002162:	e0d8      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002164:	4b6f      	ldr	r3, [pc, #444]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800216c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800216e:	4b6d      	ldr	r3, [pc, #436]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217a:	4b6a      	ldr	r3, [pc, #424]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	099b      	lsrs	r3, r3, #6
 8002180:	2200      	movs	r2, #0
 8002182:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002184:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218c:	633b      	str	r3, [r7, #48]	@ 0x30
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
 8002192:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002196:	4622      	mov	r2, r4
 8002198:	462b      	mov	r3, r5
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	0159      	lsls	r1, r3, #5
 80021a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a8:	0150      	lsls	r0, r2, #5
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4621      	mov	r1, r4
 80021b0:	1a51      	subs	r1, r2, r1
 80021b2:	6139      	str	r1, [r7, #16]
 80021b4:	4629      	mov	r1, r5
 80021b6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021c8:	4659      	mov	r1, fp
 80021ca:	018b      	lsls	r3, r1, #6
 80021cc:	4651      	mov	r1, sl
 80021ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021d2:	4651      	mov	r1, sl
 80021d4:	018a      	lsls	r2, r1, #6
 80021d6:	4651      	mov	r1, sl
 80021d8:	ebb2 0801 	subs.w	r8, r2, r1
 80021dc:	4659      	mov	r1, fp
 80021de:	eb63 0901 	sbc.w	r9, r3, r1
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021f6:	4690      	mov	r8, r2
 80021f8:	4699      	mov	r9, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	eb18 0303 	adds.w	r3, r8, r3
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	462b      	mov	r3, r5
 8002204:	eb49 0303 	adc.w	r3, r9, r3
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002216:	4629      	mov	r1, r5
 8002218:	024b      	lsls	r3, r1, #9
 800221a:	4621      	mov	r1, r4
 800221c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002220:	4621      	mov	r1, r4
 8002222:	024a      	lsls	r2, r1, #9
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222a:	2200      	movs	r2, #0
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002234:	f7fe f824 	bl	8000280 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4613      	mov	r3, r2
 800223e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002240:	e058      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	2200      	movs	r2, #0
 800224a:	4618      	mov	r0, r3
 800224c:	4611      	mov	r1, r2
 800224e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
 8002258:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800225c:	4642      	mov	r2, r8
 800225e:	464b      	mov	r3, r9
 8002260:	f04f 0000 	mov.w	r0, #0
 8002264:	f04f 0100 	mov.w	r1, #0
 8002268:	0159      	lsls	r1, r3, #5
 800226a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800226e:	0150      	lsls	r0, r2, #5
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4641      	mov	r1, r8
 8002276:	ebb2 0a01 	subs.w	sl, r2, r1
 800227a:	4649      	mov	r1, r9
 800227c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800228c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002290:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002294:	ebb2 040a 	subs.w	r4, r2, sl
 8002298:	eb63 050b 	sbc.w	r5, r3, fp
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	00eb      	lsls	r3, r5, #3
 80022a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022aa:	00e2      	lsls	r2, r4, #3
 80022ac:	4614      	mov	r4, r2
 80022ae:	461d      	mov	r5, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	18e3      	adds	r3, r4, r3
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	464b      	mov	r3, r9
 80022b8:	eb45 0303 	adc.w	r3, r5, r3
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ca:	4629      	mov	r1, r5
 80022cc:	028b      	lsls	r3, r1, #10
 80022ce:	4621      	mov	r1, r4
 80022d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d4:	4621      	mov	r1, r4
 80022d6:	028a      	lsls	r2, r1, #10
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022de:	2200      	movs	r2, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	61fa      	str	r2, [r7, #28]
 80022e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e8:	f7fd ffca 	bl	8000280 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	3301      	adds	r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002304:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x204>)
 8002312:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002318:	4618      	mov	r0, r3
 800231a:	3750      	adds	r7, #80	@ 0x50
 800231c:	46bd      	mov	sp, r7
 800231e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	00f42400 	.word	0x00f42400
 800232c:	007a1200 	.word	0x007a1200

08002330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_RCC_GetHCLKFreq+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000014 	.word	0x20000014

08002348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800234c:	f7ff fff0 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0a9b      	lsrs	r3, r3, #10
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	@ (800236c <HAL_RCC_GetPCLK1Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	08006440 	.word	0x08006440

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002374:	f7ff ffdc 	bl	8002330 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0b5b      	lsrs	r3, r3, #13
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4903      	ldr	r1, [pc, #12]	@ (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	08006440 	.word	0x08006440

08002398 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	220f      	movs	r2, #15
 80023a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_RCC_GetClockConfig+0x5c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023b4:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <HAL_RCC_GetClockConfig+0x5c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <HAL_RCC_GetClockConfig+0x5c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023cc:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_GetClockConfig+0x5c>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023da:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <HAL_RCC_GetClockConfig+0x60>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0207 	and.w	r2, r3, #7
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	601a      	str	r2, [r3, #0]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40023c00 	.word	0x40023c00

080023fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e041      	b.n	8002492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fdca 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 fc62 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d001      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e04e      	b.n	8002552 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <HAL_TIM_Base_Start_IT+0xc4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d022      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x80>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024de:	d01d      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x80>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <HAL_TIM_Base_Start_IT+0xc8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d018      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x80>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <HAL_TIM_Base_Start_IT+0xcc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x80>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1c      	ldr	r2, [pc, #112]	@ (800256c <HAL_TIM_Base_Start_IT+0xd0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00e      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x80>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1b      	ldr	r2, [pc, #108]	@ (8002570 <HAL_TIM_Base_Start_IT+0xd4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d009      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x80>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	@ (8002574 <HAL_TIM_Base_Start_IT+0xd8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x80>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a18      	ldr	r2, [pc, #96]	@ (8002578 <HAL_TIM_Base_Start_IT+0xdc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d111      	bne.n	8002540 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b06      	cmp	r3, #6
 800252c:	d010      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	e007      	b.n	8002550 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40010000 	.word	0x40010000
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800
 800256c:	40000c00 	.word	0x40000c00
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40001800 	.word	0x40001800

0800257c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e041      	b.n	8002612 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f839 	bl	800261a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 fba2 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_TIM_PWM_Start+0x24>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e022      	b.n	800269a <HAL_TIM_PWM_Start+0x6a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b04      	cmp	r3, #4
 8002658:	d109      	bne.n	800266e <HAL_TIM_PWM_Start+0x3e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e015      	b.n	800269a <HAL_TIM_PWM_Start+0x6a>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d109      	bne.n	8002688 <HAL_TIM_PWM_Start+0x58>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e008      	b.n	800269a <HAL_TIM_PWM_Start+0x6a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07c      	b.n	800279c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_TIM_PWM_Start+0x82>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026b0:	e013      	b.n	80026da <HAL_TIM_PWM_Start+0xaa>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_PWM_Start+0x92>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c0:	e00b      	b.n	80026da <HAL_TIM_PWM_Start+0xaa>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0xa2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026d0:	e003      	b.n	80026da <HAL_TIM_PWM_Start+0xaa>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	6839      	ldr	r1, [r7, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fe04 	bl	80032f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2d      	ldr	r2, [pc, #180]	@ (80027a4 <HAL_TIM_PWM_Start+0x174>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_TIM_PWM_Start+0xcc>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <HAL_TIM_PWM_Start+0x178>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <HAL_TIM_PWM_Start+0xd0>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_TIM_PWM_Start+0xd2>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a22      	ldr	r2, [pc, #136]	@ (80027a4 <HAL_TIM_PWM_Start+0x174>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <HAL_TIM_PWM_Start+0x136>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002728:	d01d      	beq.n	8002766 <HAL_TIM_PWM_Start+0x136>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1f      	ldr	r2, [pc, #124]	@ (80027ac <HAL_TIM_PWM_Start+0x17c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d018      	beq.n	8002766 <HAL_TIM_PWM_Start+0x136>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <HAL_TIM_PWM_Start+0x180>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_TIM_PWM_Start+0x136>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <HAL_TIM_PWM_Start+0x184>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00e      	beq.n	8002766 <HAL_TIM_PWM_Start+0x136>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <HAL_TIM_PWM_Start+0x178>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_TIM_PWM_Start+0x136>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a18      	ldr	r2, [pc, #96]	@ (80027b8 <HAL_TIM_PWM_Start+0x188>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_TIM_PWM_Start+0x136>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a16      	ldr	r2, [pc, #88]	@ (80027bc <HAL_TIM_PWM_Start+0x18c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d111      	bne.n	800278a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b06      	cmp	r3, #6
 8002776:	d010      	beq.n	800279a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002788:	e007      	b.n	800279a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40010400 	.word	0x40010400
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40000c00 	.word	0x40000c00
 80027b8:	40014000 	.word	0x40014000
 80027bc:	40001800 	.word	0x40001800

080027c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d020      	beq.n	8002824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0202 	mvn.w	r2, #2
 80027f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa5b 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa4d 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fa5e 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d020      	beq.n	8002870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01b      	beq.n	8002870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0204 	mvn.w	r2, #4
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa35 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa27 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fa38 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d020      	beq.n	80028bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0208 	mvn.w	r2, #8
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2204      	movs	r2, #4
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa0f 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa01 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fa12 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0210 	mvn.w	r2, #16
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2208      	movs	r2, #8
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9e9 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9db 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9ec 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0201 	mvn.w	r2, #1
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fb06 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00c      	beq.n	8002950 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fd7c 	bl	8003448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9bd 	bl	8002cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00c      	beq.n	8002998 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0220 	mvn.w	r2, #32
 8002990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fd4e 	bl	8003434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e0ae      	b.n	8002b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	f200 809f 	bhi.w	8002b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029ce:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	08002a09 	.word	0x08002a09
 80029d8:	08002b0d 	.word	0x08002b0d
 80029dc:	08002b0d 	.word	0x08002b0d
 80029e0:	08002b0d 	.word	0x08002b0d
 80029e4:	08002a49 	.word	0x08002a49
 80029e8:	08002b0d 	.word	0x08002b0d
 80029ec:	08002b0d 	.word	0x08002b0d
 80029f0:	08002b0d 	.word	0x08002b0d
 80029f4:	08002a8b 	.word	0x08002a8b
 80029f8:	08002b0d 	.word	0x08002b0d
 80029fc:	08002b0d 	.word	0x08002b0d
 8002a00:	08002b0d 	.word	0x08002b0d
 8002a04:	08002acb 	.word	0x08002acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fa24 	bl	8002e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0208 	orr.w	r2, r2, #8
 8002a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0204 	bic.w	r2, r2, #4
 8002a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6999      	ldr	r1, [r3, #24]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	619a      	str	r2, [r3, #24]
      break;
 8002a46:	e064      	b.n	8002b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fa74 	bl	8002f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6999      	ldr	r1, [r3, #24]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	021a      	lsls	r2, r3, #8
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	619a      	str	r2, [r3, #24]
      break;
 8002a88:	e043      	b.n	8002b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fac9 	bl	8003028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0208 	orr.w	r2, r2, #8
 8002aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0204 	bic.w	r2, r2, #4
 8002ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69d9      	ldr	r1, [r3, #28]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
      break;
 8002ac8:	e023      	b.n	8002b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fb1d 	bl	8003110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69d9      	ldr	r1, [r3, #28]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	021a      	lsls	r2, r3, #8
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	61da      	str	r2, [r3, #28]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIM_ConfigClockSource+0x1c>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e0b4      	b.n	8002caa <HAL_TIM_ConfigClockSource+0x186>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b78:	d03e      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b7e:	f200 8087 	bhi.w	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b86:	f000 8086 	beq.w	8002c96 <HAL_TIM_ConfigClockSource+0x172>
 8002b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8e:	d87f      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b70      	cmp	r3, #112	@ 0x70
 8002b92:	d01a      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0xa6>
 8002b94:	2b70      	cmp	r3, #112	@ 0x70
 8002b96:	d87b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b60      	cmp	r3, #96	@ 0x60
 8002b9a:	d050      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x11a>
 8002b9c:	2b60      	cmp	r3, #96	@ 0x60
 8002b9e:	d877      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b50      	cmp	r3, #80	@ 0x50
 8002ba2:	d03c      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0xfa>
 8002ba4:	2b50      	cmp	r3, #80	@ 0x50
 8002ba6:	d873      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	d058      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x13a>
 8002bac:	2b40      	cmp	r3, #64	@ 0x40
 8002bae:	d86f      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b30      	cmp	r3, #48	@ 0x30
 8002bb2:	d064      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bb4:	2b30      	cmp	r3, #48	@ 0x30
 8002bb6:	d86b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d060      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d867      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d05c      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d05a      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x15a>
 8002bc8:	e062      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bda:	f000 fb69 	bl	80032b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	609a      	str	r2, [r3, #8]
      break;
 8002bf6:	e04f      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c08:	f000 fb52 	bl	80032b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c1a:	609a      	str	r2, [r3, #8]
      break;
 8002c1c:	e03c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 fac6 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2150      	movs	r1, #80	@ 0x50
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fb1f 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e02c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 fae5 	bl	800321a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2160      	movs	r1, #96	@ 0x60
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fb0f 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e01c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 faa6 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2140      	movs	r1, #64	@ 0x40
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 faff 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e00c      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f000 faf6 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002c8e:	e003      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      break;
 8002c94:	e000      	b.n	8002c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a46      	ldr	r2, [pc, #280]	@ (8002e30 <TIM_Base_SetConfig+0x12c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d22:	d00f      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a43      	ldr	r2, [pc, #268]	@ (8002e34 <TIM_Base_SetConfig+0x130>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a42      	ldr	r2, [pc, #264]	@ (8002e38 <TIM_Base_SetConfig+0x134>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a41      	ldr	r2, [pc, #260]	@ (8002e3c <TIM_Base_SetConfig+0x138>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a40      	ldr	r2, [pc, #256]	@ (8002e40 <TIM_Base_SetConfig+0x13c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a35      	ldr	r2, [pc, #212]	@ (8002e30 <TIM_Base_SetConfig+0x12c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d64:	d027      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a32      	ldr	r2, [pc, #200]	@ (8002e34 <TIM_Base_SetConfig+0x130>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d023      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a31      	ldr	r2, [pc, #196]	@ (8002e38 <TIM_Base_SetConfig+0x134>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a30      	ldr	r2, [pc, #192]	@ (8002e3c <TIM_Base_SetConfig+0x138>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2f      	ldr	r2, [pc, #188]	@ (8002e40 <TIM_Base_SetConfig+0x13c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d017      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2e      	ldr	r2, [pc, #184]	@ (8002e44 <TIM_Base_SetConfig+0x140>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2d      	ldr	r2, [pc, #180]	@ (8002e48 <TIM_Base_SetConfig+0x144>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2c      	ldr	r2, [pc, #176]	@ (8002e4c <TIM_Base_SetConfig+0x148>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e50 <TIM_Base_SetConfig+0x14c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2a      	ldr	r2, [pc, #168]	@ (8002e54 <TIM_Base_SetConfig+0x150>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a29      	ldr	r2, [pc, #164]	@ (8002e58 <TIM_Base_SetConfig+0x154>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <TIM_Base_SetConfig+0x12c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0xf8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <TIM_Base_SetConfig+0x13c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]
  }
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40010000 	.word	0x40010000
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40000c00 	.word	0x40000c00
 8002e40:	40010400 	.word	0x40010400
 8002e44:	40014000 	.word	0x40014000
 8002e48:	40014400 	.word	0x40014400
 8002e4c:	40014800 	.word	0x40014800
 8002e50:	40001800 	.word	0x40001800
 8002e54:	40001c00 	.word	0x40001c00
 8002e58:	40002000 	.word	0x40002000

08002e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 0201 	bic.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a20      	ldr	r2, [pc, #128]	@ (8002f34 <TIM_OC1_SetConfig+0xd8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_OC1_SetConfig+0x64>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <TIM_OC1_SetConfig+0xdc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0308 	bic.w	r3, r3, #8
 8002ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a15      	ldr	r2, [pc, #84]	@ (8002f34 <TIM_OC1_SetConfig+0xd8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_OC1_SetConfig+0x8e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	@ (8002f38 <TIM_OC1_SetConfig+0xdc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40010400 	.word	0x40010400

08002f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f023 0210 	bic.w	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0320 	bic.w	r3, r3, #32
 8002f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a22      	ldr	r2, [pc, #136]	@ (8003020 <TIM_OC2_SetConfig+0xe4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_OC2_SetConfig+0x68>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a21      	ldr	r2, [pc, #132]	@ (8003024 <TIM_OC2_SetConfig+0xe8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10d      	bne.n	8002fc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <TIM_OC2_SetConfig+0xe4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_OC2_SetConfig+0x94>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a16      	ldr	r2, [pc, #88]	@ (8003024 <TIM_OC2_SetConfig+0xe8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d113      	bne.n	8002ff8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40010400 	.word	0x40010400

08003028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a21      	ldr	r2, [pc, #132]	@ (8003108 <TIM_OC3_SetConfig+0xe0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_OC3_SetConfig+0x66>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a20      	ldr	r2, [pc, #128]	@ (800310c <TIM_OC3_SetConfig+0xe4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10d      	bne.n	80030aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a16      	ldr	r2, [pc, #88]	@ (8003108 <TIM_OC3_SetConfig+0xe0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_OC3_SetConfig+0x92>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a15      	ldr	r2, [pc, #84]	@ (800310c <TIM_OC3_SetConfig+0xe4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d113      	bne.n	80030e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40010000 	.word	0x40010000
 800310c:	40010400 	.word	0x40010400

08003110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800315a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a12      	ldr	r2, [pc, #72]	@ (80031b4 <TIM_OC4_SetConfig+0xa4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_OC4_SetConfig+0x68>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a11      	ldr	r2, [pc, #68]	@ (80031b8 <TIM_OC4_SetConfig+0xa8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d109      	bne.n	800318c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800317e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40010400 	.word	0x40010400

080031bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0201 	bic.w	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 030a 	bic.w	r3, r3, #10
 80031f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	f023 0210 	bic.w	r2, r3, #16
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	031b      	lsls	r3, r3, #12
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003256:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2201      	movs	r2, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1a      	ldr	r2, [r3, #32]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	43db      	mvns	r3, r3
 8003312:	401a      	ands	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e05a      	b.n	800340a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a0:	d01d      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1d      	ldr	r2, [pc, #116]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a18      	ldr	r2, [pc, #96]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a17      	ldr	r2, [pc, #92]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a15      	ldr	r2, [pc, #84]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d10c      	bne.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	40000c00 	.word	0x40000c00
 8003428:	40010400 	.word	0x40010400
 800342c:	40014000 	.word	0x40014000
 8003430:	40001800 	.word	0x40001800

08003434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e042      	b.n	80034f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fe16 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2224      	movs	r2, #36	@ 0x24
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800349e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fd07 	bl	8003eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b20      	cmp	r3, #32
 8003514:	d121      	bne.n	800355a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_UART_Transmit_IT+0x26>
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e01a      	b.n	800355c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	@ 0x21
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003554:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b20      	cmp	r3, #32
 8003580:	d112      	bne.n	80035a8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_UART_Receive_IT+0x26>
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e00b      	b.n	80035aa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	461a      	mov	r2, r3
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fab0 	bl	8003b04 <UART_Start_Receive_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b0ba      	sub	sp, #232	@ 0xe8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_UART_IRQHandler+0x66>
 8003606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fb8f 	bl	8003d36 <UART_Receive_IT>
      return;
 8003618:	e25b      	b.n	8003ad2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800361a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80de 	beq.w	80037e0 <HAL_UART_IRQHandler+0x22c>
 8003624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003634:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80d1 	beq.w	80037e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_UART_IRQHandler+0xae>
 800364a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_UART_IRQHandler+0xd2>
 800366e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_UART_IRQHandler+0xf6>
 8003692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f043 0204 	orr.w	r2, r3, #4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d011      	beq.n	80036da <HAL_UART_IRQHandler+0x126>
 80036b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f043 0208 	orr.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 81f2 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_UART_IRQHandler+0x14e>
 80036f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb1a 	bl	8003d36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370c:	2b40      	cmp	r3, #64	@ 0x40
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_UART_IRQHandler+0x17a>
 8003726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d04f      	beq.n	80037ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa22 	bl	8003b78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373e:	2b40      	cmp	r3, #64	@ 0x40
 8003740:	d141      	bne.n	80037c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800375c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003760:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800376e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800377a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1d9      	bne.n	8003742 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d013      	beq.n	80037be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379a:	4a7e      	ldr	r2, [pc, #504]	@ (8003994 <HAL_UART_IRQHandler+0x3e0>)
 800379c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd ff88 	bl	80016b8 <HAL_DMA_Abort_IT>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e00e      	b.n	80037dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f98a 	bl	8003ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	e00a      	b.n	80037dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f986 	bl	8003ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	e006      	b.n	80037dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f982 	bl	8003ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037da:	e175      	b.n	8003ac8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	bf00      	nop
    return;
 80037de:	e173      	b.n	8003ac8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 814f 	bne.w	8003a88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8148 	beq.w	8003a88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8141 	beq.w	8003a88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003826:	2b40      	cmp	r3, #64	@ 0x40
 8003828:	f040 80b6 	bne.w	8003998 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8145 	beq.w	8003acc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800384a:	429a      	cmp	r2, r3
 800384c:	f080 813e 	bcs.w	8003acc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003856:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003862:	f000 8088 	beq.w	8003976 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800387c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003892:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800389e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1d9      	bne.n	8003866 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e1      	bne.n	80038b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003912:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003914:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003918:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e3      	bne.n	80038ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003958:	65ba      	str	r2, [r7, #88]	@ 0x58
 800395a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800395e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e3      	bne.n	8003934 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fe31 	bl	80015d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003984:	b29b      	uxth	r3, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	b29b      	uxth	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8ad 	bl	8003aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003992:	e09b      	b.n	8003acc <HAL_UART_IRQHandler+0x518>
 8003994:	08003c3f 	.word	0x08003c3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 808e 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8089 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80039e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e3      	bne.n	80039be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	623b      	str	r3, [r7, #32]
   return(result);
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e3      	bne.n	80039f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0310 	bic.w	r3, r3, #16
 8003a52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a60:	61fa      	str	r2, [r7, #28]
 8003a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	69b9      	ldr	r1, [r7, #24]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e3      	bne.n	8003a3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f833 	bl	8003aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a86:	e023      	b.n	8003ad0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x4f4>
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8e0 	bl	8003c66 <UART_Transmit_IT>
    return;
 8003aa6:	e014      	b.n	8003ad2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x51e>
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f920 	bl	8003d06 <UART_EndTransmit_IT>
    return;
 8003ac6:	e004      	b.n	8003ad2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ac8:	bf00      	nop
 8003aca:	e002      	b.n	8003ad2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003acc:	bf00      	nop
 8003ace:	e000      	b.n	8003ad2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ad0:	bf00      	nop
  }
}
 8003ad2:	37e8      	adds	r7, #232	@ 0xe8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2222      	movs	r2, #34	@ 0x22
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0220 	orr.w	r2, r2, #32
 8003b68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b095      	sub	sp, #84	@ 0x54
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ba0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e5      	bne.n	8003bb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d119      	bne.n	8003c24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f023 0310 	bic.w	r3, r3, #16
 8003c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c10:	61ba      	str	r2, [r7, #24]
 8003c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6979      	ldr	r1, [r7, #20]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c32:	bf00      	nop
 8003c34:	3754      	adds	r7, #84	@ 0x54
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff ff3d 	bl	8003ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b21      	cmp	r3, #33	@ 0x21
 8003c78:	d13e      	bne.n	8003cf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c82:	d114      	bne.n	8003cae <UART_Transmit_IT+0x48>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d110      	bne.n	8003cae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	621a      	str	r2, [r3, #32]
 8003cac:	e008      	b.n	8003cc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6211      	str	r1, [r2, #32]
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10f      	bne.n	8003cf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e000      	b.n	8003cfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cf8:	2302      	movs	r3, #2
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fc fc68 	bl	80005fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b08c      	sub	sp, #48	@ 0x30
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b22      	cmp	r3, #34	@ 0x22
 8003d48:	f040 80ae 	bne.w	8003ea8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d54:	d117      	bne.n	8003d86 <UART_Receive_IT+0x50>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d113      	bne.n	8003d86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	1c9a      	adds	r2, r3, #2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d84:	e026      	b.n	8003dd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d98:	d007      	beq.n	8003daa <UART_Receive_IT+0x74>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <UART_Receive_IT+0x82>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e008      	b.n	8003dca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4619      	mov	r1, r3
 8003de2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d15d      	bne.n	8003ea4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0220 	bic.w	r2, r2, #32
 8003df6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d135      	bne.n	8003e9a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	613b      	str	r3, [r7, #16]
   return(result);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 0310 	bic.w	r3, r3, #16
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e54:	623a      	str	r2, [r7, #32]
 8003e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d10a      	bne.n	8003e8c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fe2a 	bl	8003aec <HAL_UARTEx_RxEventCallback>
 8003e98:	e002      	b.n	8003ea0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fc fb82 	bl	80005a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e002      	b.n	8003eaa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3730      	adds	r7, #48	@ 0x30
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b0c0      	sub	sp, #256	@ 0x100
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	68d9      	ldr	r1, [r3, #12]
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	ea40 0301 	orr.w	r3, r0, r1
 8003edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f0c:	f021 010c 	bic.w	r1, r1, #12
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	6999      	ldr	r1, [r3, #24]
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	ea40 0301 	orr.w	r3, r0, r1
 8003f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b8f      	ldr	r3, [pc, #572]	@ (8004180 <UART_SetConfig+0x2cc>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d005      	beq.n	8003f54 <UART_SetConfig+0xa0>
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004184 <UART_SetConfig+0x2d0>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d104      	bne.n	8003f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7fe fa0c 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8003f58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f5c:	e003      	b.n	8003f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f5e:	f7fe f9f3 	bl	8002348 <HAL_RCC_GetPCLK1Freq>
 8003f62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f70:	f040 810c 	bne.w	800418c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f86:	4622      	mov	r2, r4
 8003f88:	462b      	mov	r3, r5
 8003f8a:	1891      	adds	r1, r2, r2
 8003f8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f96:	4621      	mov	r1, r4
 8003f98:	eb12 0801 	adds.w	r8, r2, r1
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	eb43 0901 	adc.w	r9, r3, r1
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb6:	4690      	mov	r8, r2
 8003fb8:	4699      	mov	r9, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	eb18 0303 	adds.w	r3, r8, r3
 8003fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	eb49 0303 	adc.w	r3, r9, r3
 8003fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	18db      	adds	r3, r3, r3
 8003fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe8:	4613      	mov	r3, r2
 8003fea:	eb42 0303 	adc.w	r3, r2, r3
 8003fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ff8:	f7fc f942 	bl	8000280 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4b61      	ldr	r3, [pc, #388]	@ (8004188 <UART_SetConfig+0x2d4>)
 8004002:	fba3 2302 	umull	r2, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	011c      	lsls	r4, r3, #4
 800400a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	1891      	adds	r1, r2, r2
 8004022:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004024:	415b      	adcs	r3, r3
 8004026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800402c:	4641      	mov	r1, r8
 800402e:	eb12 0a01 	adds.w	sl, r2, r1
 8004032:	4649      	mov	r1, r9
 8004034:	eb43 0b01 	adc.w	fp, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800404c:	4692      	mov	sl, r2
 800404e:	469b      	mov	fp, r3
 8004050:	4643      	mov	r3, r8
 8004052:	eb1a 0303 	adds.w	r3, sl, r3
 8004056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800405a:	464b      	mov	r3, r9
 800405c:	eb4b 0303 	adc.w	r3, fp, r3
 8004060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004070:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004078:	460b      	mov	r3, r1
 800407a:	18db      	adds	r3, r3, r3
 800407c:	643b      	str	r3, [r7, #64]	@ 0x40
 800407e:	4613      	mov	r3, r2
 8004080:	eb42 0303 	adc.w	r3, r2, r3
 8004084:	647b      	str	r3, [r7, #68]	@ 0x44
 8004086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800408a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800408e:	f7fc f8f7 	bl	8000280 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4611      	mov	r1, r2
 8004098:	4b3b      	ldr	r3, [pc, #236]	@ (8004188 <UART_SetConfig+0x2d4>)
 800409a:	fba3 2301 	umull	r2, r3, r3, r1
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2264      	movs	r2, #100	@ 0x64
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	1acb      	subs	r3, r1, r3
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040ae:	4b36      	ldr	r3, [pc, #216]	@ (8004188 <UART_SetConfig+0x2d4>)
 80040b0:	fba3 2302 	umull	r2, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040bc:	441c      	add	r4, r3
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	1891      	adds	r1, r2, r2
 80040d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040d8:	415b      	adcs	r3, r3
 80040da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040e0:	4641      	mov	r1, r8
 80040e2:	1851      	adds	r1, r2, r1
 80040e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80040e6:	4649      	mov	r1, r9
 80040e8:	414b      	adcs	r3, r1
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040f8:	4659      	mov	r1, fp
 80040fa:	00cb      	lsls	r3, r1, #3
 80040fc:	4651      	mov	r1, sl
 80040fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004102:	4651      	mov	r1, sl
 8004104:	00ca      	lsls	r2, r1, #3
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	4603      	mov	r3, r0
 800410c:	4642      	mov	r2, r8
 800410e:	189b      	adds	r3, r3, r2
 8004110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004114:	464b      	mov	r3, r9
 8004116:	460a      	mov	r2, r1
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800412c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004134:	460b      	mov	r3, r1
 8004136:	18db      	adds	r3, r3, r3
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800413a:	4613      	mov	r3, r2
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800414a:	f7fc f899 	bl	8000280 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <UART_SetConfig+0x2d4>)
 8004154:	fba3 1302 	umull	r1, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2164      	movs	r1, #100	@ 0x64
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	3332      	adds	r3, #50	@ 0x32
 8004166:	4a08      	ldr	r2, [pc, #32]	@ (8004188 <UART_SetConfig+0x2d4>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 0207 	and.w	r2, r3, #7
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4422      	add	r2, r4
 800417a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800417c:	e106      	b.n	800438c <UART_SetConfig+0x4d8>
 800417e:	bf00      	nop
 8004180:	40011000 	.word	0x40011000
 8004184:	40011400 	.word	0x40011400
 8004188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800418c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004190:	2200      	movs	r2, #0
 8004192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004196:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800419a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800419e:	4642      	mov	r2, r8
 80041a0:	464b      	mov	r3, r9
 80041a2:	1891      	adds	r1, r2, r2
 80041a4:	6239      	str	r1, [r7, #32]
 80041a6:	415b      	adcs	r3, r3
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ae:	4641      	mov	r1, r8
 80041b0:	1854      	adds	r4, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb43 0501 	adc.w	r5, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	00eb      	lsls	r3, r5, #3
 80041c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c6:	00e2      	lsls	r2, r4, #3
 80041c8:	4614      	mov	r4, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	4643      	mov	r3, r8
 80041ce:	18e3      	adds	r3, r4, r3
 80041d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041d4:	464b      	mov	r3, r9
 80041d6:	eb45 0303 	adc.w	r3, r5, r3
 80041da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041fa:	4629      	mov	r1, r5
 80041fc:	008b      	lsls	r3, r1, #2
 80041fe:	4621      	mov	r1, r4
 8004200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004204:	4621      	mov	r1, r4
 8004206:	008a      	lsls	r2, r1, #2
 8004208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800420c:	f7fc f838 	bl	8000280 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4b60      	ldr	r3, [pc, #384]	@ (8004398 <UART_SetConfig+0x4e4>)
 8004216:	fba3 2302 	umull	r2, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	011c      	lsls	r4, r3, #4
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004228:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800422c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	61b9      	str	r1, [r7, #24]
 8004238:	415b      	adcs	r3, r3
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6139      	str	r1, [r7, #16]
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004274:	464b      	mov	r3, r9
 8004276:	460a      	mov	r2, r1
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	67bb      	str	r3, [r7, #120]	@ 0x78
 800428a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004298:	4649      	mov	r1, r9
 800429a:	008b      	lsls	r3, r1, #2
 800429c:	4641      	mov	r1, r8
 800429e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a2:	4641      	mov	r1, r8
 80042a4:	008a      	lsls	r2, r1, #2
 80042a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042aa:	f7fb ffe9 	bl	8000280 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <UART_SetConfig+0x4e4>)
 80042b6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2264      	movs	r2, #100	@ 0x64
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	1acb      	subs	r3, r1, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	3332      	adds	r3, #50	@ 0x32
 80042c8:	4a33      	ldr	r2, [pc, #204]	@ (8004398 <UART_SetConfig+0x4e4>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d4:	441c      	add	r4, r3
 80042d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042da:	2200      	movs	r2, #0
 80042dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80042de:	677a      	str	r2, [r7, #116]	@ 0x74
 80042e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	415b      	adcs	r3, r3
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042f4:	4641      	mov	r1, r8
 80042f6:	1851      	adds	r1, r2, r1
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	4649      	mov	r1, r9
 80042fc:	414b      	adcs	r3, r1
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800430c:	4659      	mov	r1, fp
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004316:	4651      	mov	r1, sl
 8004318:	00ca      	lsls	r2, r1, #3
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	4603      	mov	r3, r0
 8004320:	4642      	mov	r2, r8
 8004322:	189b      	adds	r3, r3, r2
 8004324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004326:	464b      	mov	r3, r9
 8004328:	460a      	mov	r2, r1
 800432a:	eb42 0303 	adc.w	r3, r2, r3
 800432e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	663b      	str	r3, [r7, #96]	@ 0x60
 800433a:	667a      	str	r2, [r7, #100]	@ 0x64
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004348:	4649      	mov	r1, r9
 800434a:	008b      	lsls	r3, r1, #2
 800434c:	4641      	mov	r1, r8
 800434e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004352:	4641      	mov	r1, r8
 8004354:	008a      	lsls	r2, r1, #2
 8004356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800435a:	f7fb ff91 	bl	8000280 <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <UART_SetConfig+0x4e4>)
 8004364:	fba3 1302 	umull	r1, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	2164      	movs	r1, #100	@ 0x64
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	3332      	adds	r3, #50	@ 0x32
 8004376:	4a08      	ldr	r2, [pc, #32]	@ (8004398 <UART_SetConfig+0x4e4>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4422      	add	r2, r4
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004392:	46bd      	mov	sp, r7
 8004394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004398:	51eb851f 	.word	0x51eb851f

0800439c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80043aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ae:	2b84      	cmp	r3, #132	@ 0x84
 80043b0:	d005      	beq.n	80043be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80043b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	3303      	adds	r3, #3
 80043bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043d0:	f000 fafc 	bl	80049cc <vTaskStartScheduler>
  
  return osOK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	bd80      	pop	{r7, pc}

080043da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043dc:	b089      	sub	sp, #36	@ 0x24
 80043de:	af04      	add	r7, sp, #16
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d020      	beq.n	800442e <osThreadCreate+0x54>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01c      	beq.n	800442e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685c      	ldr	r4, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691e      	ldr	r6, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ffc8 	bl	800439c <makeFreeRtosPriority>
 800440c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004416:	9202      	str	r2, [sp, #8]
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	9100      	str	r1, [sp, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4632      	mov	r2, r6
 8004420:	4629      	mov	r1, r5
 8004422:	4620      	mov	r0, r4
 8004424:	f000 f8ed 	bl	8004602 <xTaskCreateStatic>
 8004428:	4603      	mov	r3, r0
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e01c      	b.n	8004468 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685c      	ldr	r4, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800443a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ffaa 	bl	800439c <makeFreeRtosPriority>
 8004448:	4602      	mov	r2, r0
 800444a:	f107 030c 	add.w	r3, r7, #12
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	9200      	str	r2, [sp, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	4632      	mov	r2, r6
 8004456:	4629      	mov	r1, r5
 8004458:	4620      	mov	r0, r4
 800445a:	f000 f932 	bl	80046c2 <xTaskCreate>
 800445e:	4603      	mov	r3, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	d001      	beq.n	8004468 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	e000      	b.n	800446a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004468:	68fb      	ldr	r3, [r7, #12]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004472 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <osDelay+0x16>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	e000      	b.n	800448a <osDelay+0x18>
 8004488:	2301      	movs	r3, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fa68 	bl	8004960 <vTaskDelay>
  
  return osOK;
 8004490:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f103 0208 	add.w	r2, r3, #8
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f103 0208 	add.w	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f103 0208 	add.w	r2, r3, #8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004552:	d103      	bne.n	800455c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e00c      	b.n	8004576 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3308      	adds	r3, #8
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e002      	b.n	800456a <vListInsert+0x2e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	d2f6      	bcs.n	8004564 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6892      	ldr	r2, [r2, #8]
 80045c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6852      	ldr	r2, [r2, #4]
 80045ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d103      	bne.n	80045e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	1e5a      	subs	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004602:	b580      	push	{r7, lr}
 8004604:	b08e      	sub	sp, #56	@ 0x38
 8004606:	af04      	add	r7, sp, #16
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	e7fd      	b.n	800462a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	61fb      	str	r3, [r7, #28]
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800464c:	23a0      	movs	r3, #160	@ 0xa0
 800464e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2ba0      	cmp	r3, #160	@ 0xa0
 8004654:	d00b      	beq.n	800466e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	61bb      	str	r3, [r7, #24]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800466e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01e      	beq.n	80046b4 <xTaskCreateStatic+0xb2>
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	2202      	movs	r2, #2
 800468a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800468e:	2300      	movs	r3, #0
 8004690:	9303      	str	r3, [sp, #12]
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	f107 0314 	add.w	r3, r7, #20
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f850 	bl	800474c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046ae:	f000 f8ed 	bl	800488c <prvAddNewTaskToReadyList>
 80046b2:	e001      	b.n	80046b8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046b8:	697b      	ldr	r3, [r7, #20]
	}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3728      	adds	r7, #40	@ 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b08c      	sub	sp, #48	@ 0x30
 80046c6:	af04      	add	r7, sp, #16
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fefe 	bl	80054d8 <pvPortMalloc>
 80046dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00e      	beq.n	8004702 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046e4:	20a0      	movs	r0, #160	@ 0xa0
 80046e6:	f000 fef7 	bl	80054d8 <pvPortMalloc>
 80046ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80046f8:	e005      	b.n	8004706 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f000 ffba 	bl	8005674 <vPortFree>
 8004700:	e001      	b.n	8004706 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d017      	beq.n	800473c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	2300      	movs	r3, #0
 8004718:	9303      	str	r3, [sp, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	9302      	str	r3, [sp, #8]
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f80e 	bl	800474c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004730:	69f8      	ldr	r0, [r7, #28]
 8004732:	f000 f8ab 	bl	800488c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e002      	b.n	8004742 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800473c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004740:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004742:	69bb      	ldr	r3, [r7, #24]
	}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004764:	3b01      	subs	r3, #1
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	617b      	str	r3, [r7, #20]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01f      	beq.n	80047dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e012      	b.n	80047c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	7819      	ldrb	r1, [r3, #0]
 80047aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	4413      	add	r3, r2
 80047b0:	3334      	adds	r3, #52	@ 0x34
 80047b2:	460a      	mov	r2, r1
 80047b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d006      	beq.n	80047d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3301      	adds	r3, #1
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d9e9      	bls.n	80047a2 <prvInitialiseNewTask+0x56>
 80047ce:	e000      	b.n	80047d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80047d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047da:	e003      	b.n	80047e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d901      	bls.n	80047ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047ea:	2306      	movs	r3, #6
 80047ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	2200      	movs	r2, #0
 80047fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fe68 	bl	80044da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	3318      	adds	r3, #24
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fe63 	bl	80044da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004818:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800481a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481c:	f1c3 0207 	rsb	r2, r3, #7
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004828:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2200      	movs	r2, #0
 8004836:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	334c      	adds	r3, #76	@ 0x4c
 800483e:	224c      	movs	r2, #76	@ 0x4c
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f8de 	bl	8005a04 <memset>
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	4a0d      	ldr	r2, [pc, #52]	@ (8004880 <prvInitialiseNewTask+0x134>)
 800484c:	651a      	str	r2, [r3, #80]	@ 0x50
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	4a0c      	ldr	r2, [pc, #48]	@ (8004884 <prvInitialiseNewTask+0x138>)
 8004852:	655a      	str	r2, [r3, #84]	@ 0x54
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	4a0c      	ldr	r2, [pc, #48]	@ (8004888 <prvInitialiseNewTask+0x13c>)
 8004858:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	68f9      	ldr	r1, [r7, #12]
 800485e:	69b8      	ldr	r0, [r7, #24]
 8004860:	f000 fc2a 	bl	80050b8 <pxPortInitialiseStack>
 8004864:	4602      	mov	r2, r0
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004876:	bf00      	nop
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20004190 	.word	0x20004190
 8004884:	200041f8 	.word	0x200041f8
 8004888:	20004260 	.word	0x20004260

0800488c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004894:	f000 fd40 	bl	8005318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004898:	4b2a      	ldr	r3, [pc, #168]	@ (8004944 <prvAddNewTaskToReadyList+0xb8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	4a29      	ldr	r2, [pc, #164]	@ (8004944 <prvAddNewTaskToReadyList+0xb8>)
 80048a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048a2:	4b29      	ldr	r3, [pc, #164]	@ (8004948 <prvAddNewTaskToReadyList+0xbc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048aa:	4a27      	ldr	r2, [pc, #156]	@ (8004948 <prvAddNewTaskToReadyList+0xbc>)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048b0:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <prvAddNewTaskToReadyList+0xb8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d110      	bne.n	80048da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048b8:	f000 fad4 	bl	8004e64 <prvInitialiseTaskLists>
 80048bc:	e00d      	b.n	80048da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048be:	4b23      	ldr	r3, [pc, #140]	@ (800494c <prvAddNewTaskToReadyList+0xc0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <prvAddNewTaskToReadyList+0xbc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d802      	bhi.n	80048da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004948 <prvAddNewTaskToReadyList+0xbc>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <prvAddNewTaskToReadyList+0xc4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004950 <prvAddNewTaskToReadyList+0xc4>)
 80048e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	2201      	movs	r2, #1
 80048ea:	409a      	lsls	r2, r3
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <prvAddNewTaskToReadyList+0xc8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	4a18      	ldr	r2, [pc, #96]	@ (8004954 <prvAddNewTaskToReadyList+0xc8>)
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4a15      	ldr	r2, [pc, #84]	@ (8004958 <prvAddNewTaskToReadyList+0xcc>)
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7ff fdf1 	bl	80044f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004912:	f000 fd33 	bl	800537c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <prvAddNewTaskToReadyList+0xc0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00e      	beq.n	800493c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800491e:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <prvAddNewTaskToReadyList+0xbc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	429a      	cmp	r2, r3
 800492a:	d207      	bcs.n	800493c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <prvAddNewTaskToReadyList+0xd0>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	2000053c 	.word	0x2000053c
 8004948:	2000043c 	.word	0x2000043c
 800494c:	20000548 	.word	0x20000548
 8004950:	20000558 	.word	0x20000558
 8004954:	20000544 	.word	0x20000544
 8004958:	20000440 	.word	0x20000440
 800495c:	e000ed04 	.word	0xe000ed04

08004960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004972:	4b14      	ldr	r3, [pc, #80]	@ (80049c4 <vTaskDelay+0x64>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <vTaskDelay+0x32>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60bb      	str	r3, [r7, #8]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004992:	f000 f885 	bl	8004aa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004996:	2100      	movs	r1, #0
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fb27 	bl	8004fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800499e:	f000 f88d 	bl	8004abc <xTaskResumeAll>
 80049a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049aa:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <vTaskDelay+0x68>)
 80049ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000564 	.word	0x20000564
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	@ 0x28
 80049d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049da:	463a      	mov	r2, r7
 80049dc:	1d39      	adds	r1, r7, #4
 80049de:	f107 0308 	add.w	r3, r7, #8
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fb fdc4 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	9202      	str	r2, [sp, #8]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	2300      	movs	r3, #0
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	2300      	movs	r3, #0
 80049f8:	460a      	mov	r2, r1
 80049fa:	4921      	ldr	r1, [pc, #132]	@ (8004a80 <vTaskStartScheduler+0xb4>)
 80049fc:	4821      	ldr	r0, [pc, #132]	@ (8004a84 <vTaskStartScheduler+0xb8>)
 80049fe:	f7ff fe00 	bl	8004602 <xTaskCreateStatic>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4a20      	ldr	r2, [pc, #128]	@ (8004a88 <vTaskStartScheduler+0xbc>)
 8004a06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a08:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <vTaskStartScheduler+0xbc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e001      	b.n	8004a1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d11b      	bne.n	8004a58 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a34:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <vTaskStartScheduler+0xc0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	334c      	adds	r3, #76	@ 0x4c
 8004a3a:	4a15      	ldr	r2, [pc, #84]	@ (8004a90 <vTaskStartScheduler+0xc4>)
 8004a3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <vTaskStartScheduler+0xc8>)
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a46:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <vTaskStartScheduler+0xcc>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <vTaskStartScheduler+0xd0>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a52:	f000 fbbd 	bl	80051d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a56:	e00f      	b.n	8004a78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a5e:	d10b      	bne.n	8004a78 <vTaskStartScheduler+0xac>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <vTaskStartScheduler+0xa8>
}
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08006428 	.word	0x08006428
 8004a84:	08004e35 	.word	0x08004e35
 8004a88:	20000560 	.word	0x20000560
 8004a8c:	2000043c 	.word	0x2000043c
 8004a90:	20000024 	.word	0x20000024
 8004a94:	2000055c 	.word	0x2000055c
 8004a98:	20000548 	.word	0x20000548
 8004a9c:	20000540 	.word	0x20000540

08004aa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004aa4:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <vTaskSuspendAll+0x18>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	4a03      	ldr	r2, [pc, #12]	@ (8004ab8 <vTaskSuspendAll+0x18>)
 8004aac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004aae:	bf00      	nop
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	20000564 	.word	0x20000564

08004abc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aca:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <xTaskResumeAll+0x118>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <xTaskResumeAll+0x2e>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	603b      	str	r3, [r7, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	e7fd      	b.n	8004ae6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004aea:	f000 fc15 	bl	8005318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004aee:	4b39      	ldr	r3, [pc, #228]	@ (8004bd4 <xTaskResumeAll+0x118>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	4a37      	ldr	r2, [pc, #220]	@ (8004bd4 <xTaskResumeAll+0x118>)
 8004af6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af8:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <xTaskResumeAll+0x118>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d161      	bne.n	8004bc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b00:	4b35      	ldr	r3, [pc, #212]	@ (8004bd8 <xTaskResumeAll+0x11c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d05d      	beq.n	8004bc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b08:	e02e      	b.n	8004b68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0a:	4b34      	ldr	r3, [pc, #208]	@ (8004bdc <xTaskResumeAll+0x120>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3318      	adds	r3, #24
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fd49 	bl	80045ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fd44 	bl	80045ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004be0 <xTaskResumeAll+0x124>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	4a2a      	ldr	r2, [pc, #168]	@ (8004be0 <xTaskResumeAll+0x124>)
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4a27      	ldr	r2, [pc, #156]	@ (8004be4 <xTaskResumeAll+0x128>)
 8004b46:	441a      	add	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f7ff fcd0 	bl	80044f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b58:	4b23      	ldr	r3, [pc, #140]	@ (8004be8 <xTaskResumeAll+0x12c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b62:	4b22      	ldr	r3, [pc, #136]	@ (8004bec <xTaskResumeAll+0x130>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b68:	4b1c      	ldr	r3, [pc, #112]	@ (8004bdc <xTaskResumeAll+0x120>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1cc      	bne.n	8004b0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b76:	f000 fa19 	bl	8004fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf0 <xTaskResumeAll+0x134>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d010      	beq.n	8004ba8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b86:	f000 f837 	bl	8004bf8 <xTaskIncrementTick>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b90:	4b16      	ldr	r3, [pc, #88]	@ (8004bec <xTaskResumeAll+0x130>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f1      	bne.n	8004b86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004ba2:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <xTaskResumeAll+0x134>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ba8:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <xTaskResumeAll+0x130>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf4 <xTaskResumeAll+0x138>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bc4:	f000 fbda 	bl	800537c <vPortExitCritical>

	return xAlreadyYielded;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000564 	.word	0x20000564
 8004bd8:	2000053c 	.word	0x2000053c
 8004bdc:	200004fc 	.word	0x200004fc
 8004be0:	20000544 	.word	0x20000544
 8004be4:	20000440 	.word	0x20000440
 8004be8:	2000043c 	.word	0x2000043c
 8004bec:	20000550 	.word	0x20000550
 8004bf0:	2000054c 	.word	0x2000054c
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c02:	4b4f      	ldr	r3, [pc, #316]	@ (8004d40 <xTaskIncrementTick+0x148>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 808f 	bne.w	8004d2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d44 <xTaskIncrementTick+0x14c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c14:	4a4b      	ldr	r2, [pc, #300]	@ (8004d44 <xTaskIncrementTick+0x14c>)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d121      	bne.n	8004c64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c20:	4b49      	ldr	r3, [pc, #292]	@ (8004d48 <xTaskIncrementTick+0x150>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	603b      	str	r3, [r7, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	e7fd      	b.n	8004c3e <xTaskIncrementTick+0x46>
 8004c42:	4b41      	ldr	r3, [pc, #260]	@ (8004d48 <xTaskIncrementTick+0x150>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <xTaskIncrementTick+0x154>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8004d48 <xTaskIncrementTick+0x150>)
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4a3e      	ldr	r2, [pc, #248]	@ (8004d4c <xTaskIncrementTick+0x154>)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b3e      	ldr	r3, [pc, #248]	@ (8004d50 <xTaskIncrementTick+0x158>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d50 <xTaskIncrementTick+0x158>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	f000 f9a4 	bl	8004fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c64:	4b3b      	ldr	r3, [pc, #236]	@ (8004d54 <xTaskIncrementTick+0x15c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d348      	bcc.n	8004d00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6e:	4b36      	ldr	r3, [pc, #216]	@ (8004d48 <xTaskIncrementTick+0x150>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c78:	4b36      	ldr	r3, [pc, #216]	@ (8004d54 <xTaskIncrementTick+0x15c>)
 8004c7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c7e:	601a      	str	r2, [r3, #0]
					break;
 8004c80:	e03e      	b.n	8004d00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c82:	4b31      	ldr	r3, [pc, #196]	@ (8004d48 <xTaskIncrementTick+0x150>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d203      	bcs.n	8004ca2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8004d54 <xTaskIncrementTick+0x15c>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ca0:	e02e      	b.n	8004d00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fc81 	bl	80045ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fc78 	bl	80045ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	4b24      	ldr	r3, [pc, #144]	@ (8004d58 <xTaskIncrementTick+0x160>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	4a22      	ldr	r2, [pc, #136]	@ (8004d58 <xTaskIncrementTick+0x160>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <xTaskIncrementTick+0x164>)
 8004cde:	441a      	add	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7ff fc04 	bl	80044f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <xTaskIncrementTick+0x168>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d3b9      	bcc.n	8004c6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cfe:	e7b6      	b.n	8004c6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d00:	4b17      	ldr	r3, [pc, #92]	@ (8004d60 <xTaskIncrementTick+0x168>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d06:	4915      	ldr	r1, [pc, #84]	@ (8004d5c <xTaskIncrementTick+0x164>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d901      	bls.n	8004d1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d1c:	4b11      	ldr	r3, [pc, #68]	@ (8004d64 <xTaskIncrementTick+0x16c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e004      	b.n	8004d34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d68 <xTaskIncrementTick+0x170>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	4a0d      	ldr	r2, [pc, #52]	@ (8004d68 <xTaskIncrementTick+0x170>)
 8004d32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d34:	697b      	ldr	r3, [r7, #20]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000564 	.word	0x20000564
 8004d44:	20000540 	.word	0x20000540
 8004d48:	200004f4 	.word	0x200004f4
 8004d4c:	200004f8 	.word	0x200004f8
 8004d50:	20000554 	.word	0x20000554
 8004d54:	2000055c 	.word	0x2000055c
 8004d58:	20000544 	.word	0x20000544
 8004d5c:	20000440 	.word	0x20000440
 8004d60:	2000043c 	.word	0x2000043c
 8004d64:	20000550 	.word	0x20000550
 8004d68:	2000054c 	.word	0x2000054c

08004d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d72:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <vTaskSwitchContext+0xb0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d7a:	4b29      	ldr	r3, [pc, #164]	@ (8004e20 <vTaskSwitchContext+0xb4>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d80:	e045      	b.n	8004e0e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004d82:	4b27      	ldr	r3, [pc, #156]	@ (8004e20 <vTaskSwitchContext+0xb4>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d88:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <vTaskSwitchContext+0xb8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d96:	7afb      	ldrb	r3, [r7, #11]
 8004d98:	f1c3 031f 	rsb	r3, r3, #31
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	4922      	ldr	r1, [pc, #136]	@ (8004e28 <vTaskSwitchContext+0xbc>)
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <vTaskSwitchContext+0x5e>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	607b      	str	r3, [r7, #4]
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <vTaskSwitchContext+0x5a>
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a14      	ldr	r2, [pc, #80]	@ (8004e28 <vTaskSwitchContext+0xbc>)
 8004dd6:	4413      	add	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3308      	adds	r3, #8
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d104      	bne.n	8004dfa <vTaskSwitchContext+0x8e>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	@ (8004e2c <vTaskSwitchContext+0xc0>)
 8004e02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e04:	4b09      	ldr	r3, [pc, #36]	@ (8004e2c <vTaskSwitchContext+0xc0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	334c      	adds	r3, #76	@ 0x4c
 8004e0a:	4a09      	ldr	r2, [pc, #36]	@ (8004e30 <vTaskSwitchContext+0xc4>)
 8004e0c:	6013      	str	r3, [r2, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000564 	.word	0x20000564
 8004e20:	20000550 	.word	0x20000550
 8004e24:	20000544 	.word	0x20000544
 8004e28:	20000440 	.word	0x20000440
 8004e2c:	2000043c 	.word	0x2000043c
 8004e30:	20000024 	.word	0x20000024

08004e34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e3c:	f000 f852 	bl	8004ee4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e40:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <prvIdleTask+0x28>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d9f9      	bls.n	8004e3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e48:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <prvIdleTask+0x2c>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e58:	e7f0      	b.n	8004e3c <prvIdleTask+0x8>
 8004e5a:	bf00      	nop
 8004e5c:	20000440 	.word	0x20000440
 8004e60:	e000ed04 	.word	0xe000ed04

08004e64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	e00c      	b.n	8004e8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4a12      	ldr	r2, [pc, #72]	@ (8004ec4 <prvInitialiseTaskLists+0x60>)
 8004e7c:	4413      	add	r3, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fb0b 	bl	800449a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3301      	adds	r3, #1
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d9ef      	bls.n	8004e70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e90:	480d      	ldr	r0, [pc, #52]	@ (8004ec8 <prvInitialiseTaskLists+0x64>)
 8004e92:	f7ff fb02 	bl	800449a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e96:	480d      	ldr	r0, [pc, #52]	@ (8004ecc <prvInitialiseTaskLists+0x68>)
 8004e98:	f7ff faff 	bl	800449a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e9c:	480c      	ldr	r0, [pc, #48]	@ (8004ed0 <prvInitialiseTaskLists+0x6c>)
 8004e9e:	f7ff fafc 	bl	800449a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ea2:	480c      	ldr	r0, [pc, #48]	@ (8004ed4 <prvInitialiseTaskLists+0x70>)
 8004ea4:	f7ff faf9 	bl	800449a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ea8:	480b      	ldr	r0, [pc, #44]	@ (8004ed8 <prvInitialiseTaskLists+0x74>)
 8004eaa:	f7ff faf6 	bl	800449a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eae:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <prvInitialiseTaskLists+0x78>)
 8004eb0:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <prvInitialiseTaskLists+0x64>)
 8004eb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <prvInitialiseTaskLists+0x7c>)
 8004eb6:	4a05      	ldr	r2, [pc, #20]	@ (8004ecc <prvInitialiseTaskLists+0x68>)
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000440 	.word	0x20000440
 8004ec8:	200004cc 	.word	0x200004cc
 8004ecc:	200004e0 	.word	0x200004e0
 8004ed0:	200004fc 	.word	0x200004fc
 8004ed4:	20000510 	.word	0x20000510
 8004ed8:	20000528 	.word	0x20000528
 8004edc:	200004f4 	.word	0x200004f4
 8004ee0:	200004f8 	.word	0x200004f8

08004ee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eea:	e019      	b.n	8004f20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004eec:	f000 fa14 	bl	8005318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef0:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <prvCheckTasksWaitingTermination+0x50>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fb56 	bl	80045ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f02:	4b0d      	ldr	r3, [pc, #52]	@ (8004f38 <prvCheckTasksWaitingTermination+0x54>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	4a0b      	ldr	r2, [pc, #44]	@ (8004f38 <prvCheckTasksWaitingTermination+0x54>)
 8004f0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f3c <prvCheckTasksWaitingTermination+0x58>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	4a0a      	ldr	r2, [pc, #40]	@ (8004f3c <prvCheckTasksWaitingTermination+0x58>)
 8004f14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f16:	f000 fa31 	bl	800537c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f810 	bl	8004f40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f20:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <prvCheckTasksWaitingTermination+0x58>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e1      	bne.n	8004eec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000510 	.word	0x20000510
 8004f38:	2000053c 	.word	0x2000053c
 8004f3c:	20000524 	.word	0x20000524

08004f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	334c      	adds	r3, #76	@ 0x4c
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fd61 	bl	8005a14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d108      	bne.n	8004f6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fb87 	bl	8005674 <vPortFree>
				vPortFree( pxTCB );
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fb84 	bl	8005674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f6c:	e019      	b.n	8004fa2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d103      	bne.n	8004f80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fb7b 	bl	8005674 <vPortFree>
	}
 8004f7e:	e010      	b.n	8004fa2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d00b      	beq.n	8004fa2 <prvDeleteTCB+0x62>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60fb      	str	r3, [r7, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <prvDeleteTCB+0x5e>
	}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <prvResetNextTaskUnblockTime+0x38>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fc4:	e008      	b.n	8004fd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fc6:	4b07      	ldr	r3, [pc, #28]	@ (8004fe4 <prvResetNextTaskUnblockTime+0x38>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a04      	ldr	r2, [pc, #16]	@ (8004fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	200004f4 	.word	0x200004f4
 8004fe8:	2000055c 	.word	0x2000055c

08004fec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ff6:	4b29      	ldr	r3, [pc, #164]	@ (800509c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ffc:	4b28      	ldr	r3, [pc, #160]	@ (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3304      	adds	r3, #4
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fad3 	bl	80045ae <uxListRemove>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800500e:	4b24      	ldr	r3, [pc, #144]	@ (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	2201      	movs	r2, #1
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43da      	mvns	r2, r3
 800501c:	4b21      	ldr	r3, [pc, #132]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4013      	ands	r3, r2
 8005022:	4a20      	ldr	r2, [pc, #128]	@ (80050a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005024:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800502c:	d10a      	bne.n	8005044 <prvAddCurrentTaskToDelayedList+0x58>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005034:	4b1a      	ldr	r3, [pc, #104]	@ (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	481a      	ldr	r0, [pc, #104]	@ (80050a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800503e:	f7ff fa59 	bl	80044f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005042:	e026      	b.n	8005092 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4413      	add	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800504c:	4b14      	ldr	r3, [pc, #80]	@ (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	429a      	cmp	r2, r3
 800505a:	d209      	bcs.n	8005070 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800505c:	4b13      	ldr	r3, [pc, #76]	@ (80050ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b0f      	ldr	r3, [pc, #60]	@ (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7ff fa67 	bl	800453c <vListInsert>
}
 800506e:	e010      	b.n	8005092 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005070:	4b0f      	ldr	r3, [pc, #60]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	4b0a      	ldr	r3, [pc, #40]	@ (80050a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7ff fa5d 	bl	800453c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005082:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d202      	bcs.n	8005092 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800508c:	4a09      	ldr	r2, [pc, #36]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	6013      	str	r3, [r2, #0]
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000540 	.word	0x20000540
 80050a0:	2000043c 	.word	0x2000043c
 80050a4:	20000544 	.word	0x20000544
 80050a8:	20000528 	.word	0x20000528
 80050ac:	200004f8 	.word	0x200004f8
 80050b0:	200004f4 	.word	0x200004f4
 80050b4:	2000055c 	.word	0x2000055c

080050b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b04      	subs	r3, #4
 80050c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3b04      	subs	r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f023 0201 	bic.w	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3b04      	subs	r3, #4
 80050e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050e8:	4a0c      	ldr	r2, [pc, #48]	@ (800511c <pxPortInitialiseStack+0x64>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3b14      	subs	r3, #20
 80050f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3b04      	subs	r3, #4
 80050fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f06f 0202 	mvn.w	r2, #2
 8005106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3b20      	subs	r3, #32
 800510c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800510e:	68fb      	ldr	r3, [r7, #12]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	08005121 	.word	0x08005121

08005120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800512a:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <prvTaskExitError+0x58>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005132:	d00b      	beq.n	800514c <prvTaskExitError+0x2c>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60fb      	str	r3, [r7, #12]
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	e7fd      	b.n	8005148 <prvTaskExitError+0x28>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	60bb      	str	r3, [r7, #8]
}
 800515e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005160:	bf00      	nop
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0fc      	beq.n	8005162 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000020 	.word	0x20000020
 800517c:	00000000 	.word	0x00000000

08005180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005180:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <pxCurrentTCBConst2>)
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	6808      	ldr	r0, [r1, #0]
 8005186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	f380 8809 	msr	PSP, r0
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8811 	msr	BASEPRI, r0
 800519a:	4770      	bx	lr
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst2>:
 80051a0:	2000043c 	.word	0x2000043c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051a8:	4808      	ldr	r0, [pc, #32]	@ (80051cc <prvPortStartFirstTask+0x24>)
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	f380 8808 	msr	MSP, r0
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f380 8814 	msr	CONTROL, r0
 80051ba:	b662      	cpsie	i
 80051bc:	b661      	cpsie	f
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	df00      	svc	0
 80051c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051ca:	bf00      	nop
 80051cc:	e000ed08 	.word	0xe000ed08

080051d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051d6:	4b47      	ldr	r3, [pc, #284]	@ (80052f4 <xPortStartScheduler+0x124>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a47      	ldr	r2, [pc, #284]	@ (80052f8 <xPortStartScheduler+0x128>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10b      	bne.n	80051f8 <xPortStartScheduler+0x28>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051f8:	4b3e      	ldr	r3, [pc, #248]	@ (80052f4 <xPortStartScheduler+0x124>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3f      	ldr	r2, [pc, #252]	@ (80052fc <xPortStartScheduler+0x12c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10b      	bne.n	800521a <xPortStartScheduler+0x4a>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60fb      	str	r3, [r7, #12]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800521a:	4b39      	ldr	r3, [pc, #228]	@ (8005300 <xPortStartScheduler+0x130>)
 800521c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	22ff      	movs	r2, #255	@ 0xff
 800522a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800523c:	b2da      	uxtb	r2, r3
 800523e:	4b31      	ldr	r3, [pc, #196]	@ (8005304 <xPortStartScheduler+0x134>)
 8005240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005242:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <xPortStartScheduler+0x138>)
 8005244:	2207      	movs	r2, #7
 8005246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005248:	e009      	b.n	800525e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800524a:	4b2f      	ldr	r3, [pc, #188]	@ (8005308 <xPortStartScheduler+0x138>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3b01      	subs	r3, #1
 8005250:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <xPortStartScheduler+0x138>)
 8005252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d0ef      	beq.n	800524a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800526a:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <xPortStartScheduler+0x138>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1c3 0307 	rsb	r3, r3, #7
 8005272:	2b04      	cmp	r3, #4
 8005274:	d00b      	beq.n	800528e <xPortStartScheduler+0xbe>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60bb      	str	r3, [r7, #8]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800528e:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <xPortStartScheduler+0x138>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	4a1c      	ldr	r2, [pc, #112]	@ (8005308 <xPortStartScheduler+0x138>)
 8005296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <xPortStartScheduler+0x138>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a0:	4a19      	ldr	r2, [pc, #100]	@ (8005308 <xPortStartScheduler+0x138>)
 80052a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052ac:	4b17      	ldr	r3, [pc, #92]	@ (800530c <xPortStartScheduler+0x13c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a16      	ldr	r2, [pc, #88]	@ (800530c <xPortStartScheduler+0x13c>)
 80052b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052b8:	4b14      	ldr	r3, [pc, #80]	@ (800530c <xPortStartScheduler+0x13c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a13      	ldr	r2, [pc, #76]	@ (800530c <xPortStartScheduler+0x13c>)
 80052be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052c4:	f000 f8da 	bl	800547c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052c8:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <xPortStartScheduler+0x140>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ce:	f000 f8f9 	bl	80054c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052d2:	4b10      	ldr	r3, [pc, #64]	@ (8005314 <xPortStartScheduler+0x144>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005314 <xPortStartScheduler+0x144>)
 80052d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052de:	f7ff ff63 	bl	80051a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052e2:	f7ff fd43 	bl	8004d6c <vTaskSwitchContext>
	prvTaskExitError();
 80052e6:	f7ff ff1b 	bl	8005120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	e000ed00 	.word	0xe000ed00
 80052f8:	410fc271 	.word	0x410fc271
 80052fc:	410fc270 	.word	0x410fc270
 8005300:	e000e400 	.word	0xe000e400
 8005304:	20000568 	.word	0x20000568
 8005308:	2000056c 	.word	0x2000056c
 800530c:	e000ed20 	.word	0xe000ed20
 8005310:	20000020 	.word	0x20000020
 8005314:	e000ef34 	.word	0xe000ef34

08005318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
}
 8005330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <vPortEnterCritical+0x5c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a0e      	ldr	r2, [pc, #56]	@ (8005374 <vPortEnterCritical+0x5c>)
 800533a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800533c:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <vPortEnterCritical+0x5c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d110      	bne.n	8005366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005344:	4b0c      	ldr	r3, [pc, #48]	@ (8005378 <vPortEnterCritical+0x60>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <vPortEnterCritical+0x4e>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	603b      	str	r3, [r7, #0]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <vPortEnterCritical+0x4a>
	}
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000020 	.word	0x20000020
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005382:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <vPortExitCritical+0x50>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <vPortExitCritical+0x26>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	607b      	str	r3, [r7, #4]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <vPortExitCritical+0x50>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <vPortExitCritical+0x50>)
 80053aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053ac:	4b07      	ldr	r3, [pc, #28]	@ (80053cc <vPortExitCritical+0x50>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <vPortExitCritical+0x44>
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20000020 	.word	0x20000020

080053d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053d0:	f3ef 8009 	mrs	r0, PSP
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <pxCurrentTCBConst>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	f01e 0f10 	tst.w	lr, #16
 80053e0:	bf08      	it	eq
 80053e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	6010      	str	r0, [r2, #0]
 80053ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053f4:	f380 8811 	msr	BASEPRI, r0
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f7ff fcb4 	bl	8004d6c <vTaskSwitchContext>
 8005404:	f04f 0000 	mov.w	r0, #0
 8005408:	f380 8811 	msr	BASEPRI, r0
 800540c:	bc09      	pop	{r0, r3}
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	6808      	ldr	r0, [r1, #0]
 8005412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005416:	f01e 0f10 	tst.w	lr, #16
 800541a:	bf08      	it	eq
 800541c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005420:	f380 8809 	msr	PSP, r0
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	f3af 8000 	nop.w

08005430 <pxCurrentTCBConst>:
 8005430:	2000043c 	.word	0x2000043c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop

08005438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005452:	f7ff fbd1 	bl	8004bf8 <xTaskIncrementTick>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <SysTick_Handler+0x40>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f383 8811 	msr	BASEPRI, r3
}
 800546e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005480:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <vPortSetupTimerInterrupt+0x34>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005486:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <vPortSetupTimerInterrupt+0x38>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800548c:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <vPortSetupTimerInterrupt+0x3c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0a      	ldr	r2, [pc, #40]	@ (80054bc <vPortSetupTimerInterrupt+0x40>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	4a09      	ldr	r2, [pc, #36]	@ (80054c0 <vPortSetupTimerInterrupt+0x44>)
 800549a:	3b01      	subs	r3, #1
 800549c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800549e:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <vPortSetupTimerInterrupt+0x34>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	e000e010 	.word	0xe000e010
 80054b4:	e000e018 	.word	0xe000e018
 80054b8:	20000014 	.word	0x20000014
 80054bc:	10624dd3 	.word	0x10624dd3
 80054c0:	e000e014 	.word	0xe000e014

080054c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054d4 <vPortEnableVFP+0x10>
 80054c8:	6801      	ldr	r1, [r0, #0]
 80054ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054ce:	6001      	str	r1, [r0, #0]
 80054d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054d2:	bf00      	nop
 80054d4:	e000ed88 	.word	0xe000ed88

080054d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	@ 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054e4:	f7ff fadc 	bl	8004aa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054e8:	4b5c      	ldr	r3, [pc, #368]	@ (800565c <pvPortMalloc+0x184>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054f0:	f000 f924 	bl	800573c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005660 <pvPortMalloc+0x188>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 8095 	bne.w	800562c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01e      	beq.n	8005546 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005508:	2208      	movs	r2, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d015      	beq.n	8005546 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f023 0307 	bic.w	r3, r3, #7
 8005520:	3308      	adds	r3, #8
 8005522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <pvPortMalloc+0x6e>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	617b      	str	r3, [r7, #20]
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d06f      	beq.n	800562c <pvPortMalloc+0x154>
 800554c:	4b45      	ldr	r3, [pc, #276]	@ (8005664 <pvPortMalloc+0x18c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	429a      	cmp	r2, r3
 8005554:	d86a      	bhi.n	800562c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005556:	4b44      	ldr	r3, [pc, #272]	@ (8005668 <pvPortMalloc+0x190>)
 8005558:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800555a:	4b43      	ldr	r3, [pc, #268]	@ (8005668 <pvPortMalloc+0x190>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005560:	e004      	b.n	800556c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d903      	bls.n	800557e <pvPortMalloc+0xa6>
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f1      	bne.n	8005562 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800557e:	4b37      	ldr	r3, [pc, #220]	@ (800565c <pvPortMalloc+0x184>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005584:	429a      	cmp	r2, r3
 8005586:	d051      	beq.n	800562c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2208      	movs	r2, #8
 800558e:	4413      	add	r3, r2
 8005590:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	1ad2      	subs	r2, r2, r3
 80055a2:	2308      	movs	r3, #8
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d920      	bls.n	80055ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <pvPortMalloc+0xfc>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	613b      	str	r3, [r7, #16]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055e6:	69b8      	ldr	r0, [r7, #24]
 80055e8:	f000 f90a 	bl	8005800 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005664 <pvPortMalloc+0x18c>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <pvPortMalloc+0x18c>)
 80055f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005664 <pvPortMalloc+0x18c>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <pvPortMalloc+0x194>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d203      	bcs.n	800560e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005606:	4b17      	ldr	r3, [pc, #92]	@ (8005664 <pvPortMalloc+0x18c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a18      	ldr	r2, [pc, #96]	@ (800566c <pvPortMalloc+0x194>)
 800560c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4b13      	ldr	r3, [pc, #76]	@ (8005660 <pvPortMalloc+0x188>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	431a      	orrs	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005622:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <pvPortMalloc+0x198>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	4a11      	ldr	r2, [pc, #68]	@ (8005670 <pvPortMalloc+0x198>)
 800562a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800562c:	f7ff fa46 	bl	8004abc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <pvPortMalloc+0x17a>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	60fb      	str	r3, [r7, #12]
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	e7fd      	b.n	800564e <pvPortMalloc+0x176>
	return pvReturn;
 8005652:	69fb      	ldr	r3, [r7, #28]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	@ 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20004178 	.word	0x20004178
 8005660:	2000418c 	.word	0x2000418c
 8005664:	2000417c 	.word	0x2000417c
 8005668:	20004170 	.word	0x20004170
 800566c:	20004180 	.word	0x20004180
 8005670:	20004184 	.word	0x20004184

08005674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04f      	beq.n	8005726 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005686:	2308      	movs	r3, #8
 8005688:	425b      	negs	r3, r3
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4b25      	ldr	r3, [pc, #148]	@ (8005730 <vPortFree+0xbc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <vPortFree+0x46>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60fb      	str	r3, [r7, #12]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <vPortFree+0x66>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60bb      	str	r3, [r7, #8]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	4b14      	ldr	r3, [pc, #80]	@ (8005730 <vPortFree+0xbc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01e      	beq.n	8005726 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11a      	bne.n	8005726 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005730 <vPortFree+0xbc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	43db      	mvns	r3, r3
 80056fa:	401a      	ands	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005700:	f7ff f9ce 	bl	8004aa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <vPortFree+0xc0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4413      	add	r3, r2
 800570e:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <vPortFree+0xc0>)
 8005710:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005712:	6938      	ldr	r0, [r7, #16]
 8005714:	f000 f874 	bl	8005800 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005718:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <vPortFree+0xc4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	4a06      	ldr	r2, [pc, #24]	@ (8005738 <vPortFree+0xc4>)
 8005720:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005722:	f7ff f9cb 	bl	8004abc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005726:	bf00      	nop
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	2000418c 	.word	0x2000418c
 8005734:	2000417c 	.word	0x2000417c
 8005738:	20004188 	.word	0x20004188

0800573c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005742:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005746:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005748:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <prvHeapInit+0xac>)
 800574a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00c      	beq.n	8005770 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3307      	adds	r3, #7
 800575a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	4a1f      	ldr	r2, [pc, #124]	@ (80057e8 <prvHeapInit+0xac>)
 800576c:	4413      	add	r3, r2
 800576e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <prvHeapInit+0xb0>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800577a:	4b1c      	ldr	r3, [pc, #112]	@ (80057ec <prvHeapInit+0xb0>)
 800577c:	2200      	movs	r2, #0
 800577e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4413      	add	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005788:	2208      	movs	r2, #8
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a15      	ldr	r2, [pc, #84]	@ (80057f0 <prvHeapInit+0xb4>)
 800579c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800579e:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <prvHeapInit+0xb4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2200      	movs	r2, #0
 80057a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057a6:	4b12      	ldr	r3, [pc, #72]	@ (80057f0 <prvHeapInit+0xb4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057bc:	4b0c      	ldr	r3, [pc, #48]	@ (80057f0 <prvHeapInit+0xb4>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4a0a      	ldr	r2, [pc, #40]	@ (80057f4 <prvHeapInit+0xb8>)
 80057ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a09      	ldr	r2, [pc, #36]	@ (80057f8 <prvHeapInit+0xbc>)
 80057d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057d4:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <prvHeapInit+0xc0>)
 80057d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057da:	601a      	str	r2, [r3, #0]
}
 80057dc:	bf00      	nop
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	20000570 	.word	0x20000570
 80057ec:	20004170 	.word	0x20004170
 80057f0:	20004178 	.word	0x20004178
 80057f4:	20004180 	.word	0x20004180
 80057f8:	2000417c 	.word	0x2000417c
 80057fc:	2000418c 	.word	0x2000418c

08005800 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005808:	4b28      	ldr	r3, [pc, #160]	@ (80058ac <prvInsertBlockIntoFreeList+0xac>)
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e002      	b.n	8005814 <prvInsertBlockIntoFreeList+0x14>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d8f7      	bhi.n	800580e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	4413      	add	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d108      	bne.n	8005842 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	441a      	add	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d118      	bne.n	8005888 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b15      	ldr	r3, [pc, #84]	@ (80058b0 <prvInsertBlockIntoFreeList+0xb0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d00d      	beq.n	800587e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	441a      	add	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	e008      	b.n	8005890 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800587e:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <prvInsertBlockIntoFreeList+0xb0>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e003      	b.n	8005890 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d002      	beq.n	800589e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20004170 	.word	0x20004170
 80058b0:	20004178 	.word	0x20004178

080058b4 <atoi>:
 80058b4:	220a      	movs	r2, #10
 80058b6:	2100      	movs	r1, #0
 80058b8:	f000 b87a 	b.w	80059b0 <strtol>

080058bc <_strtol_l.constprop.0>:
 80058bc:	2b24      	cmp	r3, #36	@ 0x24
 80058be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c2:	4686      	mov	lr, r0
 80058c4:	4690      	mov	r8, r2
 80058c6:	d801      	bhi.n	80058cc <_strtol_l.constprop.0+0x10>
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <_strtol_l.constprop.0+0x1e>
 80058cc:	f000 f8f8 	bl	8005ac0 <__errno>
 80058d0:	2316      	movs	r3, #22
 80058d2:	6003      	str	r3, [r0, #0]
 80058d4:	2000      	movs	r0, #0
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058da:	4834      	ldr	r0, [pc, #208]	@ (80059ac <_strtol_l.constprop.0+0xf0>)
 80058dc:	460d      	mov	r5, r1
 80058de:	462a      	mov	r2, r5
 80058e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058e4:	5d06      	ldrb	r6, [r0, r4]
 80058e6:	f016 0608 	ands.w	r6, r6, #8
 80058ea:	d1f8      	bne.n	80058de <_strtol_l.constprop.0+0x22>
 80058ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80058ee:	d12d      	bne.n	800594c <_strtol_l.constprop.0+0x90>
 80058f0:	782c      	ldrb	r4, [r5, #0]
 80058f2:	2601      	movs	r6, #1
 80058f4:	1c95      	adds	r5, r2, #2
 80058f6:	f033 0210 	bics.w	r2, r3, #16
 80058fa:	d109      	bne.n	8005910 <_strtol_l.constprop.0+0x54>
 80058fc:	2c30      	cmp	r4, #48	@ 0x30
 80058fe:	d12a      	bne.n	8005956 <_strtol_l.constprop.0+0x9a>
 8005900:	782a      	ldrb	r2, [r5, #0]
 8005902:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005906:	2a58      	cmp	r2, #88	@ 0x58
 8005908:	d125      	bne.n	8005956 <_strtol_l.constprop.0+0x9a>
 800590a:	786c      	ldrb	r4, [r5, #1]
 800590c:	2310      	movs	r3, #16
 800590e:	3502      	adds	r5, #2
 8005910:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005914:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005918:	2200      	movs	r2, #0
 800591a:	fbbc f9f3 	udiv	r9, ip, r3
 800591e:	4610      	mov	r0, r2
 8005920:	fb03 ca19 	mls	sl, r3, r9, ip
 8005924:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005928:	2f09      	cmp	r7, #9
 800592a:	d81b      	bhi.n	8005964 <_strtol_l.constprop.0+0xa8>
 800592c:	463c      	mov	r4, r7
 800592e:	42a3      	cmp	r3, r4
 8005930:	dd27      	ble.n	8005982 <_strtol_l.constprop.0+0xc6>
 8005932:	1c57      	adds	r7, r2, #1
 8005934:	d007      	beq.n	8005946 <_strtol_l.constprop.0+0x8a>
 8005936:	4581      	cmp	r9, r0
 8005938:	d320      	bcc.n	800597c <_strtol_l.constprop.0+0xc0>
 800593a:	d101      	bne.n	8005940 <_strtol_l.constprop.0+0x84>
 800593c:	45a2      	cmp	sl, r4
 800593e:	db1d      	blt.n	800597c <_strtol_l.constprop.0+0xc0>
 8005940:	fb00 4003 	mla	r0, r0, r3, r4
 8005944:	2201      	movs	r2, #1
 8005946:	f815 4b01 	ldrb.w	r4, [r5], #1
 800594a:	e7eb      	b.n	8005924 <_strtol_l.constprop.0+0x68>
 800594c:	2c2b      	cmp	r4, #43	@ 0x2b
 800594e:	bf04      	itt	eq
 8005950:	782c      	ldrbeq	r4, [r5, #0]
 8005952:	1c95      	addeq	r5, r2, #2
 8005954:	e7cf      	b.n	80058f6 <_strtol_l.constprop.0+0x3a>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1da      	bne.n	8005910 <_strtol_l.constprop.0+0x54>
 800595a:	2c30      	cmp	r4, #48	@ 0x30
 800595c:	bf0c      	ite	eq
 800595e:	2308      	moveq	r3, #8
 8005960:	230a      	movne	r3, #10
 8005962:	e7d5      	b.n	8005910 <_strtol_l.constprop.0+0x54>
 8005964:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005968:	2f19      	cmp	r7, #25
 800596a:	d801      	bhi.n	8005970 <_strtol_l.constprop.0+0xb4>
 800596c:	3c37      	subs	r4, #55	@ 0x37
 800596e:	e7de      	b.n	800592e <_strtol_l.constprop.0+0x72>
 8005970:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005974:	2f19      	cmp	r7, #25
 8005976:	d804      	bhi.n	8005982 <_strtol_l.constprop.0+0xc6>
 8005978:	3c57      	subs	r4, #87	@ 0x57
 800597a:	e7d8      	b.n	800592e <_strtol_l.constprop.0+0x72>
 800597c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005980:	e7e1      	b.n	8005946 <_strtol_l.constprop.0+0x8a>
 8005982:	1c53      	adds	r3, r2, #1
 8005984:	d108      	bne.n	8005998 <_strtol_l.constprop.0+0xdc>
 8005986:	2322      	movs	r3, #34	@ 0x22
 8005988:	f8ce 3000 	str.w	r3, [lr]
 800598c:	4660      	mov	r0, ip
 800598e:	f1b8 0f00 	cmp.w	r8, #0
 8005992:	d0a0      	beq.n	80058d6 <_strtol_l.constprop.0+0x1a>
 8005994:	1e69      	subs	r1, r5, #1
 8005996:	e006      	b.n	80059a6 <_strtol_l.constprop.0+0xea>
 8005998:	b106      	cbz	r6, 800599c <_strtol_l.constprop.0+0xe0>
 800599a:	4240      	negs	r0, r0
 800599c:	f1b8 0f00 	cmp.w	r8, #0
 80059a0:	d099      	beq.n	80058d6 <_strtol_l.constprop.0+0x1a>
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d1f6      	bne.n	8005994 <_strtol_l.constprop.0+0xd8>
 80059a6:	f8c8 1000 	str.w	r1, [r8]
 80059aa:	e794      	b.n	80058d6 <_strtol_l.constprop.0+0x1a>
 80059ac:	08006449 	.word	0x08006449

080059b0 <strtol>:
 80059b0:	4613      	mov	r3, r2
 80059b2:	460a      	mov	r2, r1
 80059b4:	4601      	mov	r1, r0
 80059b6:	4802      	ldr	r0, [pc, #8]	@ (80059c0 <strtol+0x10>)
 80059b8:	6800      	ldr	r0, [r0, #0]
 80059ba:	f7ff bf7f 	b.w	80058bc <_strtol_l.constprop.0>
 80059be:	bf00      	nop
 80059c0:	20000024 	.word	0x20000024

080059c4 <siprintf>:
 80059c4:	b40e      	push	{r1, r2, r3}
 80059c6:	b500      	push	{lr}
 80059c8:	b09c      	sub	sp, #112	@ 0x70
 80059ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80059cc:	9002      	str	r0, [sp, #8]
 80059ce:	9006      	str	r0, [sp, #24]
 80059d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059d4:	4809      	ldr	r0, [pc, #36]	@ (80059fc <siprintf+0x38>)
 80059d6:	9107      	str	r1, [sp, #28]
 80059d8:	9104      	str	r1, [sp, #16]
 80059da:	4909      	ldr	r1, [pc, #36]	@ (8005a00 <siprintf+0x3c>)
 80059dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e0:	9105      	str	r1, [sp, #20]
 80059e2:	6800      	ldr	r0, [r0, #0]
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	a902      	add	r1, sp, #8
 80059e8:	f000 f9f8 	bl	8005ddc <_svfiprintf_r>
 80059ec:	9b02      	ldr	r3, [sp, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	b01c      	add	sp, #112	@ 0x70
 80059f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f8:	b003      	add	sp, #12
 80059fa:	4770      	bx	lr
 80059fc:	20000024 	.word	0x20000024
 8005a00:	ffff0208 	.word	0xffff0208

08005a04 <memset>:
 8005a04:	4402      	add	r2, r0
 8005a06:	4603      	mov	r3, r0
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <_reclaim_reent>:
 8005a14:	4b29      	ldr	r3, [pc, #164]	@ (8005abc <_reclaim_reent+0xa8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4283      	cmp	r3, r0
 8005a1a:	b570      	push	{r4, r5, r6, lr}
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	d04b      	beq.n	8005ab8 <_reclaim_reent+0xa4>
 8005a20:	69c3      	ldr	r3, [r0, #28]
 8005a22:	b1ab      	cbz	r3, 8005a50 <_reclaim_reent+0x3c>
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	b16b      	cbz	r3, 8005a44 <_reclaim_reent+0x30>
 8005a28:	2500      	movs	r5, #0
 8005a2a:	69e3      	ldr	r3, [r4, #28]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	5959      	ldr	r1, [r3, r5]
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d13b      	bne.n	8005aac <_reclaim_reent+0x98>
 8005a34:	3504      	adds	r5, #4
 8005a36:	2d80      	cmp	r5, #128	@ 0x80
 8005a38:	d1f7      	bne.n	8005a2a <_reclaim_reent+0x16>
 8005a3a:	69e3      	ldr	r3, [r4, #28]
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	68d9      	ldr	r1, [r3, #12]
 8005a40:	f000 f878 	bl	8005b34 <_free_r>
 8005a44:	69e3      	ldr	r3, [r4, #28]
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	b111      	cbz	r1, 8005a50 <_reclaim_reent+0x3c>
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 f872 	bl	8005b34 <_free_r>
 8005a50:	6961      	ldr	r1, [r4, #20]
 8005a52:	b111      	cbz	r1, 8005a5a <_reclaim_reent+0x46>
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 f86d 	bl	8005b34 <_free_r>
 8005a5a:	69e1      	ldr	r1, [r4, #28]
 8005a5c:	b111      	cbz	r1, 8005a64 <_reclaim_reent+0x50>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 f868 	bl	8005b34 <_free_r>
 8005a64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a66:	b111      	cbz	r1, 8005a6e <_reclaim_reent+0x5a>
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 f863 	bl	8005b34 <_free_r>
 8005a6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a70:	b111      	cbz	r1, 8005a78 <_reclaim_reent+0x64>
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 f85e 	bl	8005b34 <_free_r>
 8005a78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a7a:	b111      	cbz	r1, 8005a82 <_reclaim_reent+0x6e>
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 f859 	bl	8005b34 <_free_r>
 8005a82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a84:	b111      	cbz	r1, 8005a8c <_reclaim_reent+0x78>
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 f854 	bl	8005b34 <_free_r>
 8005a8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a8e:	b111      	cbz	r1, 8005a96 <_reclaim_reent+0x82>
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 f84f 	bl	8005b34 <_free_r>
 8005a96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a98:	b111      	cbz	r1, 8005aa0 <_reclaim_reent+0x8c>
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 f84a 	bl	8005b34 <_free_r>
 8005aa0:	6a23      	ldr	r3, [r4, #32]
 8005aa2:	b14b      	cbz	r3, 8005ab8 <_reclaim_reent+0xa4>
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005aaa:	4718      	bx	r3
 8005aac:	680e      	ldr	r6, [r1, #0]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f840 	bl	8005b34 <_free_r>
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	e7bb      	b.n	8005a30 <_reclaim_reent+0x1c>
 8005ab8:	bd70      	pop	{r4, r5, r6, pc}
 8005aba:	bf00      	nop
 8005abc:	20000024 	.word	0x20000024

08005ac0 <__errno>:
 8005ac0:	4b01      	ldr	r3, [pc, #4]	@ (8005ac8 <__errno+0x8>)
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000024 	.word	0x20000024

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4d0d      	ldr	r5, [pc, #52]	@ (8005b04 <__libc_init_array+0x38>)
 8005ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8005b08 <__libc_init_array+0x3c>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	42a6      	cmp	r6, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	4d0b      	ldr	r5, [pc, #44]	@ (8005b0c <__libc_init_array+0x40>)
 8005ade:	4c0c      	ldr	r4, [pc, #48]	@ (8005b10 <__libc_init_array+0x44>)
 8005ae0:	f000 fc66 	bl	80063b0 <_init>
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	2600      	movs	r6, #0
 8005aea:	42a6      	cmp	r6, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af4:	4798      	blx	r3
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afe:	4798      	blx	r3
 8005b00:	3601      	adds	r6, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	08006584 	.word	0x08006584
 8005b08:	08006584 	.word	0x08006584
 8005b0c:	08006584 	.word	0x08006584
 8005b10:	08006588 	.word	0x08006588

08005b14 <__retarget_lock_acquire_recursive>:
 8005b14:	4770      	bx	lr

08005b16 <__retarget_lock_release_recursive>:
 8005b16:	4770      	bx	lr

08005b18 <memcpy>:
 8005b18:	440a      	add	r2, r1
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005b20:	d100      	bne.n	8005b24 <memcpy+0xc>
 8005b22:	4770      	bx	lr
 8005b24:	b510      	push	{r4, lr}
 8005b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2e:	4291      	cmp	r1, r2
 8005b30:	d1f9      	bne.n	8005b26 <memcpy+0xe>
 8005b32:	bd10      	pop	{r4, pc}

08005b34 <_free_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4605      	mov	r5, r0
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	d041      	beq.n	8005bc0 <_free_r+0x8c>
 8005b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b40:	1f0c      	subs	r4, r1, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bfb8      	it	lt
 8005b46:	18e4      	addlt	r4, r4, r3
 8005b48:	f000 f8e0 	bl	8005d0c <__malloc_lock>
 8005b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc4 <_free_r+0x90>)
 8005b4e:	6813      	ldr	r3, [r2, #0]
 8005b50:	b933      	cbnz	r3, 8005b60 <_free_r+0x2c>
 8005b52:	6063      	str	r3, [r4, #4]
 8005b54:	6014      	str	r4, [r2, #0]
 8005b56:	4628      	mov	r0, r5
 8005b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b5c:	f000 b8dc 	b.w	8005d18 <__malloc_unlock>
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	d908      	bls.n	8005b76 <_free_r+0x42>
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	1821      	adds	r1, r4, r0
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	bf01      	itttt	eq
 8005b6c:	6819      	ldreq	r1, [r3, #0]
 8005b6e:	685b      	ldreq	r3, [r3, #4]
 8005b70:	1809      	addeq	r1, r1, r0
 8005b72:	6021      	streq	r1, [r4, #0]
 8005b74:	e7ed      	b.n	8005b52 <_free_r+0x1e>
 8005b76:	461a      	mov	r2, r3
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	b10b      	cbz	r3, 8005b80 <_free_r+0x4c>
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	d9fa      	bls.n	8005b76 <_free_r+0x42>
 8005b80:	6811      	ldr	r1, [r2, #0]
 8005b82:	1850      	adds	r0, r2, r1
 8005b84:	42a0      	cmp	r0, r4
 8005b86:	d10b      	bne.n	8005ba0 <_free_r+0x6c>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	4401      	add	r1, r0
 8005b8c:	1850      	adds	r0, r2, r1
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	6011      	str	r1, [r2, #0]
 8005b92:	d1e0      	bne.n	8005b56 <_free_r+0x22>
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	6053      	str	r3, [r2, #4]
 8005b9a:	4408      	add	r0, r1
 8005b9c:	6010      	str	r0, [r2, #0]
 8005b9e:	e7da      	b.n	8005b56 <_free_r+0x22>
 8005ba0:	d902      	bls.n	8005ba8 <_free_r+0x74>
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	e7d6      	b.n	8005b56 <_free_r+0x22>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	1821      	adds	r1, r4, r0
 8005bac:	428b      	cmp	r3, r1
 8005bae:	bf04      	itt	eq
 8005bb0:	6819      	ldreq	r1, [r3, #0]
 8005bb2:	685b      	ldreq	r3, [r3, #4]
 8005bb4:	6063      	str	r3, [r4, #4]
 8005bb6:	bf04      	itt	eq
 8005bb8:	1809      	addeq	r1, r1, r0
 8005bba:	6021      	streq	r1, [r4, #0]
 8005bbc:	6054      	str	r4, [r2, #4]
 8005bbe:	e7ca      	b.n	8005b56 <_free_r+0x22>
 8005bc0:	bd38      	pop	{r3, r4, r5, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200042d4 	.word	0x200042d4

08005bc8 <sbrk_aligned>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4e0f      	ldr	r6, [pc, #60]	@ (8005c08 <sbrk_aligned+0x40>)
 8005bcc:	460c      	mov	r4, r1
 8005bce:	6831      	ldr	r1, [r6, #0]
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	b911      	cbnz	r1, 8005bda <sbrk_aligned+0x12>
 8005bd4:	f000 fba6 	bl	8006324 <_sbrk_r>
 8005bd8:	6030      	str	r0, [r6, #0]
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 fba1 	bl	8006324 <_sbrk_r>
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d103      	bne.n	8005bee <sbrk_aligned+0x26>
 8005be6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005bea:	4620      	mov	r0, r4
 8005bec:	bd70      	pop	{r4, r5, r6, pc}
 8005bee:	1cc4      	adds	r4, r0, #3
 8005bf0:	f024 0403 	bic.w	r4, r4, #3
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	d0f8      	beq.n	8005bea <sbrk_aligned+0x22>
 8005bf8:	1a21      	subs	r1, r4, r0
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 fb92 	bl	8006324 <_sbrk_r>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d1f2      	bne.n	8005bea <sbrk_aligned+0x22>
 8005c04:	e7ef      	b.n	8005be6 <sbrk_aligned+0x1e>
 8005c06:	bf00      	nop
 8005c08:	200042d0 	.word	0x200042d0

08005c0c <_malloc_r>:
 8005c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c10:	1ccd      	adds	r5, r1, #3
 8005c12:	f025 0503 	bic.w	r5, r5, #3
 8005c16:	3508      	adds	r5, #8
 8005c18:	2d0c      	cmp	r5, #12
 8005c1a:	bf38      	it	cc
 8005c1c:	250c      	movcc	r5, #12
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	4606      	mov	r6, r0
 8005c22:	db01      	blt.n	8005c28 <_malloc_r+0x1c>
 8005c24:	42a9      	cmp	r1, r5
 8005c26:	d904      	bls.n	8005c32 <_malloc_r+0x26>
 8005c28:	230c      	movs	r3, #12
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d08 <_malloc_r+0xfc>
 8005c36:	f000 f869 	bl	8005d0c <__malloc_lock>
 8005c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c3e:	461c      	mov	r4, r3
 8005c40:	bb44      	cbnz	r4, 8005c94 <_malloc_r+0x88>
 8005c42:	4629      	mov	r1, r5
 8005c44:	4630      	mov	r0, r6
 8005c46:	f7ff ffbf 	bl	8005bc8 <sbrk_aligned>
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	d158      	bne.n	8005d02 <_malloc_r+0xf6>
 8005c50:	f8d8 4000 	ldr.w	r4, [r8]
 8005c54:	4627      	mov	r7, r4
 8005c56:	2f00      	cmp	r7, #0
 8005c58:	d143      	bne.n	8005ce2 <_malloc_r+0xd6>
 8005c5a:	2c00      	cmp	r4, #0
 8005c5c:	d04b      	beq.n	8005cf6 <_malloc_r+0xea>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	4639      	mov	r1, r7
 8005c62:	4630      	mov	r0, r6
 8005c64:	eb04 0903 	add.w	r9, r4, r3
 8005c68:	f000 fb5c 	bl	8006324 <_sbrk_r>
 8005c6c:	4581      	cmp	r9, r0
 8005c6e:	d142      	bne.n	8005cf6 <_malloc_r+0xea>
 8005c70:	6821      	ldr	r1, [r4, #0]
 8005c72:	1a6d      	subs	r5, r5, r1
 8005c74:	4629      	mov	r1, r5
 8005c76:	4630      	mov	r0, r6
 8005c78:	f7ff ffa6 	bl	8005bc8 <sbrk_aligned>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d03a      	beq.n	8005cf6 <_malloc_r+0xea>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	442b      	add	r3, r5
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	bb62      	cbnz	r2, 8005ce8 <_malloc_r+0xdc>
 8005c8e:	f8c8 7000 	str.w	r7, [r8]
 8005c92:	e00f      	b.n	8005cb4 <_malloc_r+0xa8>
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	1b52      	subs	r2, r2, r5
 8005c98:	d420      	bmi.n	8005cdc <_malloc_r+0xd0>
 8005c9a:	2a0b      	cmp	r2, #11
 8005c9c:	d917      	bls.n	8005cce <_malloc_r+0xc2>
 8005c9e:	1961      	adds	r1, r4, r5
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	6025      	str	r5, [r4, #0]
 8005ca4:	bf18      	it	ne
 8005ca6:	6059      	strne	r1, [r3, #4]
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	bf08      	it	eq
 8005cac:	f8c8 1000 	streq.w	r1, [r8]
 8005cb0:	5162      	str	r2, [r4, r5]
 8005cb2:	604b      	str	r3, [r1, #4]
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f000 f82f 	bl	8005d18 <__malloc_unlock>
 8005cba:	f104 000b 	add.w	r0, r4, #11
 8005cbe:	1d23      	adds	r3, r4, #4
 8005cc0:	f020 0007 	bic.w	r0, r0, #7
 8005cc4:	1ac2      	subs	r2, r0, r3
 8005cc6:	bf1c      	itt	ne
 8005cc8:	1a1b      	subne	r3, r3, r0
 8005cca:	50a3      	strne	r3, [r4, r2]
 8005ccc:	e7af      	b.n	8005c2e <_malloc_r+0x22>
 8005cce:	6862      	ldr	r2, [r4, #4]
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	bf0c      	ite	eq
 8005cd4:	f8c8 2000 	streq.w	r2, [r8]
 8005cd8:	605a      	strne	r2, [r3, #4]
 8005cda:	e7eb      	b.n	8005cb4 <_malloc_r+0xa8>
 8005cdc:	4623      	mov	r3, r4
 8005cde:	6864      	ldr	r4, [r4, #4]
 8005ce0:	e7ae      	b.n	8005c40 <_malloc_r+0x34>
 8005ce2:	463c      	mov	r4, r7
 8005ce4:	687f      	ldr	r7, [r7, #4]
 8005ce6:	e7b6      	b.n	8005c56 <_malloc_r+0x4a>
 8005ce8:	461a      	mov	r2, r3
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	d1fb      	bne.n	8005ce8 <_malloc_r+0xdc>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6053      	str	r3, [r2, #4]
 8005cf4:	e7de      	b.n	8005cb4 <_malloc_r+0xa8>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f000 f80c 	bl	8005d18 <__malloc_unlock>
 8005d00:	e794      	b.n	8005c2c <_malloc_r+0x20>
 8005d02:	6005      	str	r5, [r0, #0]
 8005d04:	e7d6      	b.n	8005cb4 <_malloc_r+0xa8>
 8005d06:	bf00      	nop
 8005d08:	200042d4 	.word	0x200042d4

08005d0c <__malloc_lock>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	@ (8005d14 <__malloc_lock+0x8>)
 8005d0e:	f7ff bf01 	b.w	8005b14 <__retarget_lock_acquire_recursive>
 8005d12:	bf00      	nop
 8005d14:	200042cc 	.word	0x200042cc

08005d18 <__malloc_unlock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	@ (8005d20 <__malloc_unlock+0x8>)
 8005d1a:	f7ff befc 	b.w	8005b16 <__retarget_lock_release_recursive>
 8005d1e:	bf00      	nop
 8005d20:	200042cc 	.word	0x200042cc

08005d24 <__ssputs_r>:
 8005d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	688e      	ldr	r6, [r1, #8]
 8005d2a:	461f      	mov	r7, r3
 8005d2c:	42be      	cmp	r6, r7
 8005d2e:	680b      	ldr	r3, [r1, #0]
 8005d30:	4682      	mov	sl, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	4690      	mov	r8, r2
 8005d36:	d82d      	bhi.n	8005d94 <__ssputs_r+0x70>
 8005d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d40:	d026      	beq.n	8005d90 <__ssputs_r+0x6c>
 8005d42:	6965      	ldr	r5, [r4, #20]
 8005d44:	6909      	ldr	r1, [r1, #16]
 8005d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d4a:	eba3 0901 	sub.w	r9, r3, r1
 8005d4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d52:	1c7b      	adds	r3, r7, #1
 8005d54:	444b      	add	r3, r9
 8005d56:	106d      	asrs	r5, r5, #1
 8005d58:	429d      	cmp	r5, r3
 8005d5a:	bf38      	it	cc
 8005d5c:	461d      	movcc	r5, r3
 8005d5e:	0553      	lsls	r3, r2, #21
 8005d60:	d527      	bpl.n	8005db2 <__ssputs_r+0x8e>
 8005d62:	4629      	mov	r1, r5
 8005d64:	f7ff ff52 	bl	8005c0c <_malloc_r>
 8005d68:	4606      	mov	r6, r0
 8005d6a:	b360      	cbz	r0, 8005dc6 <__ssputs_r+0xa2>
 8005d6c:	6921      	ldr	r1, [r4, #16]
 8005d6e:	464a      	mov	r2, r9
 8005d70:	f7ff fed2 	bl	8005b18 <memcpy>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	6126      	str	r6, [r4, #16]
 8005d82:	6165      	str	r5, [r4, #20]
 8005d84:	444e      	add	r6, r9
 8005d86:	eba5 0509 	sub.w	r5, r5, r9
 8005d8a:	6026      	str	r6, [r4, #0]
 8005d8c:	60a5      	str	r5, [r4, #8]
 8005d8e:	463e      	mov	r6, r7
 8005d90:	42be      	cmp	r6, r7
 8005d92:	d900      	bls.n	8005d96 <__ssputs_r+0x72>
 8005d94:	463e      	mov	r6, r7
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	f000 faa8 	bl	80062f0 <memmove>
 8005da0:	68a3      	ldr	r3, [r4, #8]
 8005da2:	1b9b      	subs	r3, r3, r6
 8005da4:	60a3      	str	r3, [r4, #8]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	4433      	add	r3, r6
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	2000      	movs	r0, #0
 8005dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db2:	462a      	mov	r2, r5
 8005db4:	f000 fac6 	bl	8006344 <_realloc_r>
 8005db8:	4606      	mov	r6, r0
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d1e0      	bne.n	8005d80 <__ssputs_r+0x5c>
 8005dbe:	6921      	ldr	r1, [r4, #16]
 8005dc0:	4650      	mov	r0, sl
 8005dc2:	f7ff feb7 	bl	8005b34 <_free_r>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	f8ca 3000 	str.w	r3, [sl]
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dd8:	e7e9      	b.n	8005dae <__ssputs_r+0x8a>
	...

08005ddc <_svfiprintf_r>:
 8005ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de0:	4698      	mov	r8, r3
 8005de2:	898b      	ldrh	r3, [r1, #12]
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	b09d      	sub	sp, #116	@ 0x74
 8005de8:	4607      	mov	r7, r0
 8005dea:	460d      	mov	r5, r1
 8005dec:	4614      	mov	r4, r2
 8005dee:	d510      	bpl.n	8005e12 <_svfiprintf_r+0x36>
 8005df0:	690b      	ldr	r3, [r1, #16]
 8005df2:	b973      	cbnz	r3, 8005e12 <_svfiprintf_r+0x36>
 8005df4:	2140      	movs	r1, #64	@ 0x40
 8005df6:	f7ff ff09 	bl	8005c0c <_malloc_r>
 8005dfa:	6028      	str	r0, [r5, #0]
 8005dfc:	6128      	str	r0, [r5, #16]
 8005dfe:	b930      	cbnz	r0, 8005e0e <_svfiprintf_r+0x32>
 8005e00:	230c      	movs	r3, #12
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e08:	b01d      	add	sp, #116	@ 0x74
 8005e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0e:	2340      	movs	r3, #64	@ 0x40
 8005e10:	616b      	str	r3, [r5, #20]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e16:	2320      	movs	r3, #32
 8005e18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e20:	2330      	movs	r3, #48	@ 0x30
 8005e22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fc0 <_svfiprintf_r+0x1e4>
 8005e26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e2a:	f04f 0901 	mov.w	r9, #1
 8005e2e:	4623      	mov	r3, r4
 8005e30:	469a      	mov	sl, r3
 8005e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e36:	b10a      	cbz	r2, 8005e3c <_svfiprintf_r+0x60>
 8005e38:	2a25      	cmp	r2, #37	@ 0x25
 8005e3a:	d1f9      	bne.n	8005e30 <_svfiprintf_r+0x54>
 8005e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e40:	d00b      	beq.n	8005e5a <_svfiprintf_r+0x7e>
 8005e42:	465b      	mov	r3, fp
 8005e44:	4622      	mov	r2, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f7ff ff6b 	bl	8005d24 <__ssputs_r>
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f000 80a7 	beq.w	8005fa2 <_svfiprintf_r+0x1c6>
 8005e54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e56:	445a      	add	r2, fp
 8005e58:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 809f 	beq.w	8005fa2 <_svfiprintf_r+0x1c6>
 8005e64:	2300      	movs	r3, #0
 8005e66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e6e:	f10a 0a01 	add.w	sl, sl, #1
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	9307      	str	r3, [sp, #28]
 8005e76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e7c:	4654      	mov	r4, sl
 8005e7e:	2205      	movs	r2, #5
 8005e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e84:	484e      	ldr	r0, [pc, #312]	@ (8005fc0 <_svfiprintf_r+0x1e4>)
 8005e86:	f7fa f9ab 	bl	80001e0 <memchr>
 8005e8a:	9a04      	ldr	r2, [sp, #16]
 8005e8c:	b9d8      	cbnz	r0, 8005ec6 <_svfiprintf_r+0xea>
 8005e8e:	06d0      	lsls	r0, r2, #27
 8005e90:	bf44      	itt	mi
 8005e92:	2320      	movmi	r3, #32
 8005e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e98:	0711      	lsls	r1, r2, #28
 8005e9a:	bf44      	itt	mi
 8005e9c:	232b      	movmi	r3, #43	@ 0x2b
 8005e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ea8:	d015      	beq.n	8005ed6 <_svfiprintf_r+0xfa>
 8005eaa:	9a07      	ldr	r2, [sp, #28]
 8005eac:	4654      	mov	r4, sl
 8005eae:	2000      	movs	r0, #0
 8005eb0:	f04f 0c0a 	mov.w	ip, #10
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eba:	3b30      	subs	r3, #48	@ 0x30
 8005ebc:	2b09      	cmp	r3, #9
 8005ebe:	d94b      	bls.n	8005f58 <_svfiprintf_r+0x17c>
 8005ec0:	b1b0      	cbz	r0, 8005ef0 <_svfiprintf_r+0x114>
 8005ec2:	9207      	str	r2, [sp, #28]
 8005ec4:	e014      	b.n	8005ef0 <_svfiprintf_r+0x114>
 8005ec6:	eba0 0308 	sub.w	r3, r0, r8
 8005eca:	fa09 f303 	lsl.w	r3, r9, r3
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	9304      	str	r3, [sp, #16]
 8005ed2:	46a2      	mov	sl, r4
 8005ed4:	e7d2      	b.n	8005e7c <_svfiprintf_r+0xa0>
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	1d19      	adds	r1, r3, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	9103      	str	r1, [sp, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfbb      	ittet	lt
 8005ee2:	425b      	neglt	r3, r3
 8005ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ee8:	9307      	strge	r3, [sp, #28]
 8005eea:	9307      	strlt	r3, [sp, #28]
 8005eec:	bfb8      	it	lt
 8005eee:	9204      	strlt	r2, [sp, #16]
 8005ef0:	7823      	ldrb	r3, [r4, #0]
 8005ef2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ef4:	d10a      	bne.n	8005f0c <_svfiprintf_r+0x130>
 8005ef6:	7863      	ldrb	r3, [r4, #1]
 8005ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005efa:	d132      	bne.n	8005f62 <_svfiprintf_r+0x186>
 8005efc:	9b03      	ldr	r3, [sp, #12]
 8005efe:	1d1a      	adds	r2, r3, #4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	9203      	str	r2, [sp, #12]
 8005f04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f08:	3402      	adds	r4, #2
 8005f0a:	9305      	str	r3, [sp, #20]
 8005f0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fd0 <_svfiprintf_r+0x1f4>
 8005f10:	7821      	ldrb	r1, [r4, #0]
 8005f12:	2203      	movs	r2, #3
 8005f14:	4650      	mov	r0, sl
 8005f16:	f7fa f963 	bl	80001e0 <memchr>
 8005f1a:	b138      	cbz	r0, 8005f2c <_svfiprintf_r+0x150>
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	eba0 000a 	sub.w	r0, r0, sl
 8005f22:	2240      	movs	r2, #64	@ 0x40
 8005f24:	4082      	lsls	r2, r0
 8005f26:	4313      	orrs	r3, r2
 8005f28:	3401      	adds	r4, #1
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f30:	4824      	ldr	r0, [pc, #144]	@ (8005fc4 <_svfiprintf_r+0x1e8>)
 8005f32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f36:	2206      	movs	r2, #6
 8005f38:	f7fa f952 	bl	80001e0 <memchr>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d036      	beq.n	8005fae <_svfiprintf_r+0x1d2>
 8005f40:	4b21      	ldr	r3, [pc, #132]	@ (8005fc8 <_svfiprintf_r+0x1ec>)
 8005f42:	bb1b      	cbnz	r3, 8005f8c <_svfiprintf_r+0x1b0>
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	3307      	adds	r3, #7
 8005f48:	f023 0307 	bic.w	r3, r3, #7
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	9303      	str	r3, [sp, #12]
 8005f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f52:	4433      	add	r3, r6
 8005f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f56:	e76a      	b.n	8005e2e <_svfiprintf_r+0x52>
 8005f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	2001      	movs	r0, #1
 8005f60:	e7a8      	b.n	8005eb4 <_svfiprintf_r+0xd8>
 8005f62:	2300      	movs	r3, #0
 8005f64:	3401      	adds	r4, #1
 8005f66:	9305      	str	r3, [sp, #20]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f04f 0c0a 	mov.w	ip, #10
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f74:	3a30      	subs	r2, #48	@ 0x30
 8005f76:	2a09      	cmp	r2, #9
 8005f78:	d903      	bls.n	8005f82 <_svfiprintf_r+0x1a6>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0c6      	beq.n	8005f0c <_svfiprintf_r+0x130>
 8005f7e:	9105      	str	r1, [sp, #20]
 8005f80:	e7c4      	b.n	8005f0c <_svfiprintf_r+0x130>
 8005f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f86:	4604      	mov	r4, r0
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e7f0      	b.n	8005f6e <_svfiprintf_r+0x192>
 8005f8c:	ab03      	add	r3, sp, #12
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	462a      	mov	r2, r5
 8005f92:	4b0e      	ldr	r3, [pc, #56]	@ (8005fcc <_svfiprintf_r+0x1f0>)
 8005f94:	a904      	add	r1, sp, #16
 8005f96:	4638      	mov	r0, r7
 8005f98:	f3af 8000 	nop.w
 8005f9c:	1c42      	adds	r2, r0, #1
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	d1d6      	bne.n	8005f50 <_svfiprintf_r+0x174>
 8005fa2:	89ab      	ldrh	r3, [r5, #12]
 8005fa4:	065b      	lsls	r3, r3, #25
 8005fa6:	f53f af2d 	bmi.w	8005e04 <_svfiprintf_r+0x28>
 8005faa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fac:	e72c      	b.n	8005e08 <_svfiprintf_r+0x2c>
 8005fae:	ab03      	add	r3, sp, #12
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <_svfiprintf_r+0x1f0>)
 8005fb6:	a904      	add	r1, sp, #16
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f000 f879 	bl	80060b0 <_printf_i>
 8005fbe:	e7ed      	b.n	8005f9c <_svfiprintf_r+0x1c0>
 8005fc0:	08006549 	.word	0x08006549
 8005fc4:	08006553 	.word	0x08006553
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	08005d25 	.word	0x08005d25
 8005fd0:	0800654f 	.word	0x0800654f

08005fd4 <_printf_common>:
 8005fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	4616      	mov	r6, r2
 8005fda:	4698      	mov	r8, r3
 8005fdc:	688a      	ldr	r2, [r1, #8]
 8005fde:	690b      	ldr	r3, [r1, #16]
 8005fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	bfb8      	it	lt
 8005fe8:	4613      	movlt	r3, r2
 8005fea:	6033      	str	r3, [r6, #0]
 8005fec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	b10a      	cbz	r2, 8005ffa <_printf_common+0x26>
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	6033      	str	r3, [r6, #0]
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	0699      	lsls	r1, r3, #26
 8005ffe:	bf42      	ittt	mi
 8006000:	6833      	ldrmi	r3, [r6, #0]
 8006002:	3302      	addmi	r3, #2
 8006004:	6033      	strmi	r3, [r6, #0]
 8006006:	6825      	ldr	r5, [r4, #0]
 8006008:	f015 0506 	ands.w	r5, r5, #6
 800600c:	d106      	bne.n	800601c <_printf_common+0x48>
 800600e:	f104 0a19 	add.w	sl, r4, #25
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	6832      	ldr	r2, [r6, #0]
 8006016:	1a9b      	subs	r3, r3, r2
 8006018:	42ab      	cmp	r3, r5
 800601a:	dc26      	bgt.n	800606a <_printf_common+0x96>
 800601c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006020:	6822      	ldr	r2, [r4, #0]
 8006022:	3b00      	subs	r3, #0
 8006024:	bf18      	it	ne
 8006026:	2301      	movne	r3, #1
 8006028:	0692      	lsls	r2, r2, #26
 800602a:	d42b      	bmi.n	8006084 <_printf_common+0xb0>
 800602c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006030:	4641      	mov	r1, r8
 8006032:	4638      	mov	r0, r7
 8006034:	47c8      	blx	r9
 8006036:	3001      	adds	r0, #1
 8006038:	d01e      	beq.n	8006078 <_printf_common+0xa4>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	6922      	ldr	r2, [r4, #16]
 800603e:	f003 0306 	and.w	r3, r3, #6
 8006042:	2b04      	cmp	r3, #4
 8006044:	bf02      	ittt	eq
 8006046:	68e5      	ldreq	r5, [r4, #12]
 8006048:	6833      	ldreq	r3, [r6, #0]
 800604a:	1aed      	subeq	r5, r5, r3
 800604c:	68a3      	ldr	r3, [r4, #8]
 800604e:	bf0c      	ite	eq
 8006050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006054:	2500      	movne	r5, #0
 8006056:	4293      	cmp	r3, r2
 8006058:	bfc4      	itt	gt
 800605a:	1a9b      	subgt	r3, r3, r2
 800605c:	18ed      	addgt	r5, r5, r3
 800605e:	2600      	movs	r6, #0
 8006060:	341a      	adds	r4, #26
 8006062:	42b5      	cmp	r5, r6
 8006064:	d11a      	bne.n	800609c <_printf_common+0xc8>
 8006066:	2000      	movs	r0, #0
 8006068:	e008      	b.n	800607c <_printf_common+0xa8>
 800606a:	2301      	movs	r3, #1
 800606c:	4652      	mov	r2, sl
 800606e:	4641      	mov	r1, r8
 8006070:	4638      	mov	r0, r7
 8006072:	47c8      	blx	r9
 8006074:	3001      	adds	r0, #1
 8006076:	d103      	bne.n	8006080 <_printf_common+0xac>
 8006078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800607c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006080:	3501      	adds	r5, #1
 8006082:	e7c6      	b.n	8006012 <_printf_common+0x3e>
 8006084:	18e1      	adds	r1, r4, r3
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	2030      	movs	r0, #48	@ 0x30
 800608a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800608e:	4422      	add	r2, r4
 8006090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006098:	3302      	adds	r3, #2
 800609a:	e7c7      	b.n	800602c <_printf_common+0x58>
 800609c:	2301      	movs	r3, #1
 800609e:	4622      	mov	r2, r4
 80060a0:	4641      	mov	r1, r8
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c8      	blx	r9
 80060a6:	3001      	adds	r0, #1
 80060a8:	d0e6      	beq.n	8006078 <_printf_common+0xa4>
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7d9      	b.n	8006062 <_printf_common+0x8e>
	...

080060b0 <_printf_i>:
 80060b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	7e0f      	ldrb	r7, [r1, #24]
 80060b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060b8:	2f78      	cmp	r7, #120	@ 0x78
 80060ba:	4691      	mov	r9, r2
 80060bc:	4680      	mov	r8, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	469a      	mov	sl, r3
 80060c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060c6:	d807      	bhi.n	80060d8 <_printf_i+0x28>
 80060c8:	2f62      	cmp	r7, #98	@ 0x62
 80060ca:	d80a      	bhi.n	80060e2 <_printf_i+0x32>
 80060cc:	2f00      	cmp	r7, #0
 80060ce:	f000 80d2 	beq.w	8006276 <_printf_i+0x1c6>
 80060d2:	2f58      	cmp	r7, #88	@ 0x58
 80060d4:	f000 80b9 	beq.w	800624a <_printf_i+0x19a>
 80060d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060e0:	e03a      	b.n	8006158 <_printf_i+0xa8>
 80060e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060e6:	2b15      	cmp	r3, #21
 80060e8:	d8f6      	bhi.n	80060d8 <_printf_i+0x28>
 80060ea:	a101      	add	r1, pc, #4	@ (adr r1, 80060f0 <_printf_i+0x40>)
 80060ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060f0:	08006149 	.word	0x08006149
 80060f4:	0800615d 	.word	0x0800615d
 80060f8:	080060d9 	.word	0x080060d9
 80060fc:	080060d9 	.word	0x080060d9
 8006100:	080060d9 	.word	0x080060d9
 8006104:	080060d9 	.word	0x080060d9
 8006108:	0800615d 	.word	0x0800615d
 800610c:	080060d9 	.word	0x080060d9
 8006110:	080060d9 	.word	0x080060d9
 8006114:	080060d9 	.word	0x080060d9
 8006118:	080060d9 	.word	0x080060d9
 800611c:	0800625d 	.word	0x0800625d
 8006120:	08006187 	.word	0x08006187
 8006124:	08006217 	.word	0x08006217
 8006128:	080060d9 	.word	0x080060d9
 800612c:	080060d9 	.word	0x080060d9
 8006130:	0800627f 	.word	0x0800627f
 8006134:	080060d9 	.word	0x080060d9
 8006138:	08006187 	.word	0x08006187
 800613c:	080060d9 	.word	0x080060d9
 8006140:	080060d9 	.word	0x080060d9
 8006144:	0800621f 	.word	0x0800621f
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6032      	str	r2, [r6, #0]
 8006150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006158:	2301      	movs	r3, #1
 800615a:	e09d      	b.n	8006298 <_printf_i+0x1e8>
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	6820      	ldr	r0, [r4, #0]
 8006160:	1d19      	adds	r1, r3, #4
 8006162:	6031      	str	r1, [r6, #0]
 8006164:	0606      	lsls	r6, r0, #24
 8006166:	d501      	bpl.n	800616c <_printf_i+0xbc>
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	e003      	b.n	8006174 <_printf_i+0xc4>
 800616c:	0645      	lsls	r5, r0, #25
 800616e:	d5fb      	bpl.n	8006168 <_printf_i+0xb8>
 8006170:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006174:	2d00      	cmp	r5, #0
 8006176:	da03      	bge.n	8006180 <_printf_i+0xd0>
 8006178:	232d      	movs	r3, #45	@ 0x2d
 800617a:	426d      	negs	r5, r5
 800617c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006180:	4859      	ldr	r0, [pc, #356]	@ (80062e8 <_printf_i+0x238>)
 8006182:	230a      	movs	r3, #10
 8006184:	e011      	b.n	80061aa <_printf_i+0xfa>
 8006186:	6821      	ldr	r1, [r4, #0]
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	0608      	lsls	r0, r1, #24
 800618c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006190:	d402      	bmi.n	8006198 <_printf_i+0xe8>
 8006192:	0649      	lsls	r1, r1, #25
 8006194:	bf48      	it	mi
 8006196:	b2ad      	uxthmi	r5, r5
 8006198:	2f6f      	cmp	r7, #111	@ 0x6f
 800619a:	4853      	ldr	r0, [pc, #332]	@ (80062e8 <_printf_i+0x238>)
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	bf14      	ite	ne
 80061a0:	230a      	movne	r3, #10
 80061a2:	2308      	moveq	r3, #8
 80061a4:	2100      	movs	r1, #0
 80061a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061aa:	6866      	ldr	r6, [r4, #4]
 80061ac:	60a6      	str	r6, [r4, #8]
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	bfa2      	ittt	ge
 80061b2:	6821      	ldrge	r1, [r4, #0]
 80061b4:	f021 0104 	bicge.w	r1, r1, #4
 80061b8:	6021      	strge	r1, [r4, #0]
 80061ba:	b90d      	cbnz	r5, 80061c0 <_printf_i+0x110>
 80061bc:	2e00      	cmp	r6, #0
 80061be:	d04b      	beq.n	8006258 <_printf_i+0x1a8>
 80061c0:	4616      	mov	r6, r2
 80061c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c6:	fb03 5711 	mls	r7, r3, r1, r5
 80061ca:	5dc7      	ldrb	r7, [r0, r7]
 80061cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061d0:	462f      	mov	r7, r5
 80061d2:	42bb      	cmp	r3, r7
 80061d4:	460d      	mov	r5, r1
 80061d6:	d9f4      	bls.n	80061c2 <_printf_i+0x112>
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d10b      	bne.n	80061f4 <_printf_i+0x144>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	07df      	lsls	r7, r3, #31
 80061e0:	d508      	bpl.n	80061f4 <_printf_i+0x144>
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	6861      	ldr	r1, [r4, #4]
 80061e6:	4299      	cmp	r1, r3
 80061e8:	bfde      	ittt	le
 80061ea:	2330      	movle	r3, #48	@ 0x30
 80061ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80061f4:	1b92      	subs	r2, r2, r6
 80061f6:	6122      	str	r2, [r4, #16]
 80061f8:	f8cd a000 	str.w	sl, [sp]
 80061fc:	464b      	mov	r3, r9
 80061fe:	aa03      	add	r2, sp, #12
 8006200:	4621      	mov	r1, r4
 8006202:	4640      	mov	r0, r8
 8006204:	f7ff fee6 	bl	8005fd4 <_printf_common>
 8006208:	3001      	adds	r0, #1
 800620a:	d14a      	bne.n	80062a2 <_printf_i+0x1f2>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006210:	b004      	add	sp, #16
 8006212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f043 0320 	orr.w	r3, r3, #32
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	4833      	ldr	r0, [pc, #204]	@ (80062ec <_printf_i+0x23c>)
 8006220:	2778      	movs	r7, #120	@ 0x78
 8006222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6831      	ldr	r1, [r6, #0]
 800622a:	061f      	lsls	r7, r3, #24
 800622c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006230:	d402      	bmi.n	8006238 <_printf_i+0x188>
 8006232:	065f      	lsls	r7, r3, #25
 8006234:	bf48      	it	mi
 8006236:	b2ad      	uxthmi	r5, r5
 8006238:	6031      	str	r1, [r6, #0]
 800623a:	07d9      	lsls	r1, r3, #31
 800623c:	bf44      	itt	mi
 800623e:	f043 0320 	orrmi.w	r3, r3, #32
 8006242:	6023      	strmi	r3, [r4, #0]
 8006244:	b11d      	cbz	r5, 800624e <_printf_i+0x19e>
 8006246:	2310      	movs	r3, #16
 8006248:	e7ac      	b.n	80061a4 <_printf_i+0xf4>
 800624a:	4827      	ldr	r0, [pc, #156]	@ (80062e8 <_printf_i+0x238>)
 800624c:	e7e9      	b.n	8006222 <_printf_i+0x172>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	f023 0320 	bic.w	r3, r3, #32
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	e7f6      	b.n	8006246 <_printf_i+0x196>
 8006258:	4616      	mov	r6, r2
 800625a:	e7bd      	b.n	80061d8 <_printf_i+0x128>
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	6961      	ldr	r1, [r4, #20]
 8006262:	1d18      	adds	r0, r3, #4
 8006264:	6030      	str	r0, [r6, #0]
 8006266:	062e      	lsls	r6, r5, #24
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	d501      	bpl.n	8006270 <_printf_i+0x1c0>
 800626c:	6019      	str	r1, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0x1c6>
 8006270:	0668      	lsls	r0, r5, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0x1bc>
 8006274:	8019      	strh	r1, [r3, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	4616      	mov	r6, r2
 800627c:	e7bc      	b.n	80061f8 <_printf_i+0x148>
 800627e:	6833      	ldr	r3, [r6, #0]
 8006280:	1d1a      	adds	r2, r3, #4
 8006282:	6032      	str	r2, [r6, #0]
 8006284:	681e      	ldr	r6, [r3, #0]
 8006286:	6862      	ldr	r2, [r4, #4]
 8006288:	2100      	movs	r1, #0
 800628a:	4630      	mov	r0, r6
 800628c:	f7f9 ffa8 	bl	80001e0 <memchr>
 8006290:	b108      	cbz	r0, 8006296 <_printf_i+0x1e6>
 8006292:	1b80      	subs	r0, r0, r6
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	2300      	movs	r3, #0
 800629c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a0:	e7aa      	b.n	80061f8 <_printf_i+0x148>
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	4632      	mov	r2, r6
 80062a6:	4649      	mov	r1, r9
 80062a8:	4640      	mov	r0, r8
 80062aa:	47d0      	blx	sl
 80062ac:	3001      	adds	r0, #1
 80062ae:	d0ad      	beq.n	800620c <_printf_i+0x15c>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	079b      	lsls	r3, r3, #30
 80062b4:	d413      	bmi.n	80062de <_printf_i+0x22e>
 80062b6:	68e0      	ldr	r0, [r4, #12]
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	4298      	cmp	r0, r3
 80062bc:	bfb8      	it	lt
 80062be:	4618      	movlt	r0, r3
 80062c0:	e7a6      	b.n	8006210 <_printf_i+0x160>
 80062c2:	2301      	movs	r3, #1
 80062c4:	4632      	mov	r2, r6
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	47d0      	blx	sl
 80062cc:	3001      	adds	r0, #1
 80062ce:	d09d      	beq.n	800620c <_printf_i+0x15c>
 80062d0:	3501      	adds	r5, #1
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	9903      	ldr	r1, [sp, #12]
 80062d6:	1a5b      	subs	r3, r3, r1
 80062d8:	42ab      	cmp	r3, r5
 80062da:	dcf2      	bgt.n	80062c2 <_printf_i+0x212>
 80062dc:	e7eb      	b.n	80062b6 <_printf_i+0x206>
 80062de:	2500      	movs	r5, #0
 80062e0:	f104 0619 	add.w	r6, r4, #25
 80062e4:	e7f5      	b.n	80062d2 <_printf_i+0x222>
 80062e6:	bf00      	nop
 80062e8:	0800655a 	.word	0x0800655a
 80062ec:	0800656b 	.word	0x0800656b

080062f0 <memmove>:
 80062f0:	4288      	cmp	r0, r1
 80062f2:	b510      	push	{r4, lr}
 80062f4:	eb01 0402 	add.w	r4, r1, r2
 80062f8:	d902      	bls.n	8006300 <memmove+0x10>
 80062fa:	4284      	cmp	r4, r0
 80062fc:	4623      	mov	r3, r4
 80062fe:	d807      	bhi.n	8006310 <memmove+0x20>
 8006300:	1e43      	subs	r3, r0, #1
 8006302:	42a1      	cmp	r1, r4
 8006304:	d008      	beq.n	8006318 <memmove+0x28>
 8006306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800630a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800630e:	e7f8      	b.n	8006302 <memmove+0x12>
 8006310:	4402      	add	r2, r0
 8006312:	4601      	mov	r1, r0
 8006314:	428a      	cmp	r2, r1
 8006316:	d100      	bne.n	800631a <memmove+0x2a>
 8006318:	bd10      	pop	{r4, pc}
 800631a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800631e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006322:	e7f7      	b.n	8006314 <memmove+0x24>

08006324 <_sbrk_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d06      	ldr	r5, [pc, #24]	@ (8006340 <_sbrk_r+0x1c>)
 8006328:	2300      	movs	r3, #0
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	602b      	str	r3, [r5, #0]
 8006330:	f7fa ffbc 	bl	80012ac <_sbrk>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d102      	bne.n	800633e <_sbrk_r+0x1a>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	b103      	cbz	r3, 800633e <_sbrk_r+0x1a>
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	bd38      	pop	{r3, r4, r5, pc}
 8006340:	200042c8 	.word	0x200042c8

08006344 <_realloc_r>:
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	4680      	mov	r8, r0
 800634a:	4615      	mov	r5, r2
 800634c:	460c      	mov	r4, r1
 800634e:	b921      	cbnz	r1, 800635a <_realloc_r+0x16>
 8006350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	4611      	mov	r1, r2
 8006356:	f7ff bc59 	b.w	8005c0c <_malloc_r>
 800635a:	b92a      	cbnz	r2, 8006368 <_realloc_r+0x24>
 800635c:	f7ff fbea 	bl	8005b34 <_free_r>
 8006360:	2400      	movs	r4, #0
 8006362:	4620      	mov	r0, r4
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	f000 f81a 	bl	80063a0 <_malloc_usable_size_r>
 800636c:	4285      	cmp	r5, r0
 800636e:	4606      	mov	r6, r0
 8006370:	d802      	bhi.n	8006378 <_realloc_r+0x34>
 8006372:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006376:	d8f4      	bhi.n	8006362 <_realloc_r+0x1e>
 8006378:	4629      	mov	r1, r5
 800637a:	4640      	mov	r0, r8
 800637c:	f7ff fc46 	bl	8005c0c <_malloc_r>
 8006380:	4607      	mov	r7, r0
 8006382:	2800      	cmp	r0, #0
 8006384:	d0ec      	beq.n	8006360 <_realloc_r+0x1c>
 8006386:	42b5      	cmp	r5, r6
 8006388:	462a      	mov	r2, r5
 800638a:	4621      	mov	r1, r4
 800638c:	bf28      	it	cs
 800638e:	4632      	movcs	r2, r6
 8006390:	f7ff fbc2 	bl	8005b18 <memcpy>
 8006394:	4621      	mov	r1, r4
 8006396:	4640      	mov	r0, r8
 8006398:	f7ff fbcc 	bl	8005b34 <_free_r>
 800639c:	463c      	mov	r4, r7
 800639e:	e7e0      	b.n	8006362 <_realloc_r+0x1e>

080063a0 <_malloc_usable_size_r>:
 80063a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a4:	1f18      	subs	r0, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfbc      	itt	lt
 80063aa:	580b      	ldrlt	r3, [r1, r0]
 80063ac:	18c0      	addlt	r0, r0, r3
 80063ae:	4770      	bx	lr

080063b0 <_init>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr

080063bc <_fini>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr
